[{"/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/index.js":"1","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/App.js":"2","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/reportWebVitals.js":"3","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/redux/store.js":"4","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/firebase/index.js":"5","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/redux/actions.js":"6","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/firebase/context.js":"7","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/firebase/firebase.js":"8","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/components/play/PlayRoute.js":"9","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/components/landing-page/LandingPageRoute.js":"10","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/components/rounds-list-route/RoundsListRoute.js":"11","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/components/header/Header.js":"12","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/components/dialogs/SignInDialog.js":"13","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/components/dialogs/RenameDialog.js":"14","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/components/dialogs/DeleteRoundDialog.js":"15","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/redux/reducers/index.js":"16","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/redux/actionTypes.js":"17","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/components/header/PlayButton.js":"18","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/components/header/HeaderAvatar.js":"19","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/components/play/JitsiComponent.js":"20","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/components/header/ProjectName.js":"21","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/components/header/HeaderMenu.js":"22","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/components/play/PlayUI.js":"23","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/components/play/EffectsSidebar.js":"24","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/components/play/PatternsSidebar.js":"25","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/components/dialogs/ShareDialog.js":"26","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/audio-engine/AudioEngine.js":"27","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/utils/defaultData.js":"28","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/utils/index.js":"29","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/components/play/layer-settings/LayerSettings.js":"30","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/redux/reducers/round.js":"31","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/redux/reducers/rounds.js":"32","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/utils/constants.js":"33","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/audio-engine/Track.js":"34","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/components/play/layer-settings/LayerAutomation.js":"35","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/components/play/layer-settings/LayerType.js":"36","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/components/play/layer-settings/LayerNumberOfSteps.js":"37","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/components/play/layer-settings/LayerInstrument.js":"38","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/components/play/layer-settings/LayerName.js":"39","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/components/play/layer-settings/VolumeSlider.js":"40","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/components/play/PatternThumbControl.js":"41","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/components/play/EffectThumbControl.js":"42","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/audio-engine/FX.js":"43","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/audio-engine/Instruments.js":"44","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/audio-engine/Automation.js":"45","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/audio-engine/fx/reverb.js":"46","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/audio-engine/fx/autowah.js":"47","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/audio-engine/fx/bitcrusher.js":"48","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/audio-engine/fx/distortion.js":"49","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/audio-engine/fx/highpass.js":"50","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/audio-engine/fx/lowpass.js":"51","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/audio-engine/fx/delay.js":"52","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/audio-engine/instruments/TomToms.js":"53","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/audio-engine/instruments/Rimshot.js":"54","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/audio-engine/instruments/Maracas.js":"55","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/audio-engine/instruments/Cymbal.js":"56","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/audio-engine/instruments/Cowbell.js":"57","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/audio-engine/instruments/Congas.js":"58","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/audio-engine/instruments/Claves.js":"59","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/audio-engine/instruments/Clap.js":"60","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/audio-engine/instruments/SnareDrum.js":"61","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/audio-engine/instruments/HitHatOpen.js":"62","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/audio-engine/instruments/HiHatClosed.js":"63","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/audio-engine/instruments/BassDrum.js":"64","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/audio-engine/instruments/InstrumentBaseClass.js":"65","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/audio-engine/fx/fx-base-class.js":"66","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/samples/Bass Drum [BD]/index.js":"67","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/samples/Tom Toms [LT-MT-HT]/index.js":"68","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/samples/Cymbal [CY]/index.js":"69","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/samples/Hi Hat Closed [CH]/index.js":"70","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/samples/Snare Drum [SD]/index.js":"71","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/samples/Hi Hat Open [OH]/index.js":"72","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/samples/Claves [CL]/index.js":"73","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/samples/Clap [CP]/index.js":"74","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/samples/Congas [HC-MC-LC]/index.js":"75","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/samples/Cowbell [CB]/index.js":"76","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/samples/Maracas [MA]/index.js":"77","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/samples/Rimshot [RS]/index.js":"78","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/components/header/SwingSlider.js":"79","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/components/header/TempoSlider.js":"80","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/redux/reducers/display.js":"81","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/redux/reducers/users.js":"82","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/redux/reducers/user.js":"83"},{"size":775,"mtime":1612272836141,"results":"84","hashOfConfig":"85"},{"size":2788,"mtime":1612534671811,"results":"86","hashOfConfig":"85"},{"size":362,"mtime":1607436898481,"results":"87","hashOfConfig":"85"},{"size":117,"mtime":1612170980071,"results":"88","hashOfConfig":"85"},{"size":115,"mtime":1612169138907,"results":"89","hashOfConfig":"85"},{"size":3498,"mtime":1612515824930,"results":"90","hashOfConfig":"85"},{"size":113,"mtime":1612169138902,"results":"91","hashOfConfig":"85"},{"size":15970,"mtime":1612521357281,"results":"92","hashOfConfig":"85"},{"size":14621,"mtime":1612538719279,"results":"93","hashOfConfig":"85"},{"size":3101,"mtime":1612265100367,"results":"94","hashOfConfig":"85"},{"size":8575,"mtime":1612521808625,"results":"95","hashOfConfig":"85"},{"size":6521,"mtime":1612536333595,"results":"96","hashOfConfig":"85"},{"size":12319,"mtime":1612537149470,"results":"97","hashOfConfig":"85"},{"size":2890,"mtime":1612527091779,"results":"98","hashOfConfig":"85"},{"size":2899,"mtime":1612521203096,"results":"99","hashOfConfig":"85"},{"size":285,"mtime":1612261745556,"results":"100","hashOfConfig":"85"},{"size":2643,"mtime":1612515800605,"results":"101","hashOfConfig":"85"},{"size":1822,"mtime":1612346625308,"results":"102","hashOfConfig":"85"},{"size":7477,"mtime":1612549154986,"results":"103","hashOfConfig":"85"},{"size":5265,"mtime":1612537476199,"results":"104","hashOfConfig":"85"},{"size":4507,"mtime":1612527227685,"results":"105","hashOfConfig":"85"},{"size":4640,"mtime":1612514632190,"results":"106","hashOfConfig":"85"},{"size":39719,"mtime":1612557991629,"results":"107","hashOfConfig":"85"},{"size":7919,"mtime":1612549276459,"results":"108","hashOfConfig":"85"},{"size":7440,"mtime":1612303599720,"results":"109","hashOfConfig":"85"},{"size":5453,"mtime":1612338712944,"results":"110","hashOfConfig":"85"},{"size":3572,"mtime":1612358882084,"results":"111","hashOfConfig":"85"},{"size":3761,"mtime":1612546566558,"results":"112","hashOfConfig":"85"},{"size":2506,"mtime":1612354518185,"results":"113","hashOfConfig":"85"},{"size":5560,"mtime":1612351039657,"results":"114","hashOfConfig":"85"},{"size":12147,"mtime":1612360110125,"results":"115","hashOfConfig":"85"},{"size":448,"mtime":1612185728027,"results":"116","hashOfConfig":"85"},{"size":976,"mtime":1612556871247,"results":"117","hashOfConfig":"85"},{"size":10916,"mtime":1612302515379,"results":"118","hashOfConfig":"85"},{"size":3412,"mtime":1612358091808,"results":"119","hashOfConfig":"85"},{"size":3413,"mtime":1612539886839,"results":"120","hashOfConfig":"85"},{"size":2628,"mtime":1612348463145,"results":"121","hashOfConfig":"85"},{"size":4046,"mtime":1612556008347,"results":"122","hashOfConfig":"85"},{"size":1566,"mtime":1612348580651,"results":"123","hashOfConfig":"85"},{"size":2646,"mtime":1612349756359,"results":"124","hashOfConfig":"85"},{"size":8438,"mtime":1612558229378,"results":"125","hashOfConfig":"85"},{"size":8306,"mtime":1612558090206,"results":"126","hashOfConfig":"85"},{"size":1386,"mtime":1612540620454,"results":"127","hashOfConfig":"85"},{"size":3357,"mtime":1612556265303,"results":"128","hashOfConfig":"85"},{"size":4268,"mtime":1612256286716,"results":"129","hashOfConfig":"85"},{"size":1702,"mtime":1612211864771,"results":"130","hashOfConfig":"85"},{"size":5484,"mtime":1612541198408,"results":"131","hashOfConfig":"85"},{"size":1708,"mtime":1612211886021,"results":"132","hashOfConfig":"85"},{"size":2589,"mtime":1612547021826,"results":"133","hashOfConfig":"85"},{"size":2462,"mtime":1612546920825,"results":"134","hashOfConfig":"85"},{"size":2907,"mtime":1612546984584,"results":"135","hashOfConfig":"85"},{"size":7110,"mtime":1612547061045,"results":"136","hashOfConfig":"85"},{"size":575,"mtime":1612211742480,"results":"137","hashOfConfig":"85"},{"size":561,"mtime":1612211727663,"results":"138","hashOfConfig":"85"},{"size":561,"mtime":1612211719824,"results":"139","hashOfConfig":"85"},{"size":551,"mtime":1612211686267,"results":"140","hashOfConfig":"85"},{"size":561,"mtime":1612211677860,"results":"141","hashOfConfig":"85"},{"size":563,"mtime":1612211668599,"results":"142","hashOfConfig":"85"},{"size":551,"mtime":1612211651289,"results":"143","hashOfConfig":"85"},{"size":531,"mtime":1612211655474,"results":"144","hashOfConfig":"85"},{"size":582,"mtime":1612211735890,"results":"145","hashOfConfig":"85"},{"size":592,"mtime":1612211707653,"results":"146","hashOfConfig":"85"},{"size":604,"mtime":1612211695680,"results":"147","hashOfConfig":"85"},{"size":573,"mtime":1612211629978,"results":"148","hashOfConfig":"85"},{"size":4964,"mtime":1612258553916,"results":"149","hashOfConfig":"85"},{"size":1239,"mtime":1612540402913,"results":"150","hashOfConfig":"85"},{"size":1144,"mtime":1612210050231,"results":"151","hashOfConfig":"85"},{"size":1026,"mtime":1612210051888,"results":"152","hashOfConfig":"85"},{"size":467,"mtime":1612210051299,"results":"153","hashOfConfig":"85"},{"size":355,"mtime":1612210051391,"results":"154","hashOfConfig":"85"},{"size":579,"mtime":1612210051661,"results":"155","hashOfConfig":"85"},{"size":383,"mtime":1612210051473,"results":"156","hashOfConfig":"85"},{"size":326,"mtime":1612210050493,"results":"157","hashOfConfig":"85"},{"size":439,"mtime":1612210050329,"results":"158","hashOfConfig":"85"},{"size":858,"mtime":1612210050641,"results":"159","hashOfConfig":"85"},{"size":439,"mtime":1612210050728,"results":"160","hashOfConfig":"85"},{"size":327,"mtime":1612210051523,"results":"161","hashOfConfig":"85"},{"size":327,"mtime":1612210051562,"results":"162","hashOfConfig":"85"},{"size":1948,"mtime":1612359310578,"results":"163","hashOfConfig":"85"},{"size":1920,"mtime":1612359354435,"results":"164","hashOfConfig":"85"},{"size":2818,"mtime":1612515787509,"results":"165","hashOfConfig":"85"},{"size":446,"mtime":1612261731722,"results":"166","hashOfConfig":"85"},{"size":1030,"mtime":1612354644250,"results":"167","hashOfConfig":"85"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},"12pcy8c",{"filePath":"171","messages":"172","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"170"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"170"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"170"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"170"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"170"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"170"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"170"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"170"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"170"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"170"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"170"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"170"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233","usedDeprecatedRules":"170"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"170"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"170"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244","usedDeprecatedRules":"170"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253","usedDeprecatedRules":"170"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"170"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"170"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"170"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"265","usedDeprecatedRules":"170"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"268","usedDeprecatedRules":"170"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"271","usedDeprecatedRules":"170"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"274","messages":"275","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"276","usedDeprecatedRules":"170"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"281","usedDeprecatedRules":"170"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"284","usedDeprecatedRules":"170"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"311","messages":"312","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"325","messages":"326","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"329","usedDeprecatedRules":"170"},{"filePath":"330","messages":"331","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"332","usedDeprecatedRules":"170"},{"filePath":"333","messages":"334","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"335","usedDeprecatedRules":"170"},{"filePath":"336","messages":"337","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"338","usedDeprecatedRules":"170"},{"filePath":"339","messages":"340","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"341","usedDeprecatedRules":"170"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"344","usedDeprecatedRules":"170"},{"filePath":"345","messages":"346","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"347","usedDeprecatedRules":"170"},{"filePath":"348","messages":"349","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"350","usedDeprecatedRules":"170"},{"filePath":"351","messages":"352","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"353","usedDeprecatedRules":"170"},{"filePath":"354","messages":"355","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"356","usedDeprecatedRules":"170"},{"filePath":"357","messages":"358","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"359","usedDeprecatedRules":"170"},{"filePath":"360","messages":"361","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"362","usedDeprecatedRules":"170"},{"filePath":"363","messages":"364","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"365","usedDeprecatedRules":"170"},{"filePath":"366","messages":"367","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"368","usedDeprecatedRules":"170"},{"filePath":"369","messages":"370","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"371","messages":"372","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"373","messages":"374","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},"/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/index.js",[],["375","376"],"/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/App.js",["377","378","379","380"],"import React, { useEffect, useContext } from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  useHistory\n} from \"react-router-dom\";\nimport { connect } from \"react-redux\";\n//import { createMuiTheme, ThemeProvider } from '@material-ui/core/styles'; // switching to alpha version because of strictmode warnings (https://stackoverflow.com/questions/61220424/material-ui-drawer-finddomnode-is-deprecated-in-strictmode)\nimport { unstable_createMuiStrictModeTheme, ThemeProvider } from '@material-ui/core/styles';\nimport { FirebaseContext } from './firebase';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport './App.css'\nimport PlayRoute from './components/play/PlayRoute';\nimport LandingPageRoute from './components/landing-page/LandingPageRoute';\nimport RoundsListRoute from './components/rounds-list-route/RoundsListRoute'\nimport Header from './components/header/Header';\nimport SignInDialog from './components/dialogs/SignInDialog'\nimport { setUser, setRounds, setIsShowingSignInDialog } from './redux/actions'\nimport _ from 'lodash'\nimport RenameDialog from './components/dialogs/RenameDialog';\nimport DeleteRoundDialog from './components/dialogs/DeleteRoundDialog';\n\n\n\nfunction App ({ setUser, setRounds, setIsShowingSignInDialog }) {\n  const firebaseContext = useContext(FirebaseContext);\n  const history = useHistory();\n  const theme = React.useMemo(\n    () =>\n      unstable_createMuiStrictModeTheme({\n        palette: {\n          type: 'dark',\n          primary: {\n            dark: '#AAAAAA',\n            main: '#EAEAEA',\n            light: '#FFFFFF'\n          },\n          secondary: {\n            dark: '#333333',\n            main: '#474747',\n            light: '#C1C1C1'\n          },\n          text: {\n            primary: '#EAEAEA'\n          },\n          action: {\n            active: '#EAEAEA'\n          }\n        },\n        shape: {\n          borderRadius: 32\n        },\n        typography: {\n          button: {\n            textTransform: 'none'\n          }\n        }\n      }),\n    [],\n  );\n\n\n\n  return (\n    <div className=\"App\">\n      <ThemeProvider theme={theme}>\n        <CssBaseline />\n        <Router>\n          <Header />\n          <Switch>\n            <Route path=\"/rounds\" component={RoundsListRoute} />\n            <Route path=\"/play\" component={PlayRoute} />\n            <Route path=\"/\" component={LandingPageRoute} />\n          </Switch>\n        </Router>\n        <SignInDialog />\n        <RenameDialog />\n        <DeleteRoundDialog />\n      </ThemeProvider>\n    </div>\n  );\n}\n\nconst mapStateToProps = state => {\n  return {\n    user: state.user,\n    isShowingSignInDialog: state.display.isShowingSignInDialog\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  {\n    setUser,\n    setRounds,\n    setIsShowingSignInDialog\n  }\n)(App);","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/reportWebVitals.js",[],"/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/redux/store.js",[],"/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/firebase/index.js",[],"/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/redux/actions.js",[],"/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/firebase/context.js",[],"/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/firebase/firebase.js",[],"/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/components/play/PlayRoute.js",["381"],"import React, { Component } from 'react'\nimport PlayUI from './PlayUI'\nimport PatternsSidebar from './PatternsSidebar'\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/styles';\nimport Box from '@material-ui/core/Box';\nimport EffectsSidebar from './EffectsSidebar';\nimport _ from 'lodash';\nimport Loader from 'react-loader-spinner';\nimport { connect } from \"react-redux\";\nimport { FirebaseContext } from '../../firebase';\nimport { setRound, setUsers, setIsPlaying, setUserBusFxOverride, addUserBus, setRoundCurrentUsers, setRoundBpm, setRoundSwing } from '../../redux/actions'\nimport AudioEngine from '../../audio-engine/AudioEngine'\nimport ShareDialog from '../dialogs/ShareDialog'\nimport { getDefaultUserBus, getDefaultUserPatterns } from '../../utils/defaultData'\nimport LayerSettings from './layer-settings/LayerSettings';\n\nconst styles = theme => ({\n    root: {\n        height: '100%',\n        position: 'relative',\n        overflow: 'hidden'\n    },\n    loader: {\n        position: 'absolute',\n        top: 0,\n        zIndex: 9,\n        width: '100%',\n        height: '100%',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center'\n    }\n})\n\nclass PlayRoute extends Component {\n    static contextType = FirebaseContext;\n    constructor (props) {\n        super(props)\n        this.isLoadingRound = false;\n        this.hasLoadedRound = false;\n        this.isDisposing = false;\n        this.reloadCollaborationLayers = this.reloadCollaborationLayers.bind(this)\n        this.startAudioContext = this.startAudioContext.bind(this)\n        this.reloadCollaborationLayersThrottled = _.debounce(this.reloadCollaborationLayers, 1000)\n    }\n    componentDidMount () {\n        //console.log('PlayRoute::componentDidMount()', this.props.user, this.isLoadingRound, this.hasLoadedRound, this.props.round);\n        this.addStartAudioContextListener()\n        if (!this.isLoadingRound && !this.hasLoadedRound && !_.isNil(this.props.user)) {\n            this.loadRound()\n        }\n    }\n\n    componentDidUpdate () {\n        //  console.log('PlayRoute::componentDidUpdate()', this.props.user);\n        if (!this.isLoadingRound && !this.hasLoadedRound && _.isNil(this.props.round) && !_.isNil(this.props.user)) {\n            this.loadRound()\n        }\n    }\n\n    async componentWillUnmount () {\n        this.isDisposing = true;\n        this.removeFirebaseListeners()\n        AudioEngine.stop()\n        if (!_.isNil(this.props.round) && !_.isNil(this.props.round.currentUsers)) {\n            this.props.setIsPlaying(false)\n        }\n        /*let currentUsers = _.cloneDeep(this.props.round.currentUsers)\n        _.pull(currentUsers, this.props.user.id)\n        await this.context.updateRound(this.props.round.id, { currentUsers })*/\n        this.props.setRound(null)\n        this.props.setUsers([])\n        this.isLoadingRound = false;\n        this.hasLoadedRound = false;\n    }\n\n    async loadRound () {\n        this.isLoadingRound = true;\n        let roundId = this.props.location.pathname.split('/play/')[1]\n        // console.log('PlayRoute::loadRound()', roundId);\n        let round = await this.context.getRound(roundId)\n        if (_.isNil(round) || _.isNil(round.currentUsers)) {\n            // probably deleted round\n            this.props.history.push('/rounds')\n            return\n        }\n\n        const userId = this.props.user.id\n        if (!round.currentUsers.includes(userId)) {\n            // first time user to this round\n            // add ourselves to current users of this round\n            round.currentUsers.push(userId)\n            // check if we have a user bus and user patterns document (createdBy user will already, but collaborators wont)\n            if (_.isNil(round.userBuses[userId])) {\n                round.userBuses[userId] = getDefaultUserBus(userId)\n                await this.context.createUserBus(roundId, userId, round.userBuses[userId])\n            }\n            if (_.isNil(round.userPatterns[userId])) {\n                round.userPatterns[userId] = getDefaultUserPatterns(userId)\n                await this.context.saveUserPatterns(roundId, userId, round.userPatterns[userId])\n            }\n        }\n        await this.context.updateRound(round.id, { currentUsers: round.currentUsers })\n        // load other current users (to get colors, avatar etc)\n        let currentUsers = []\n        for (const currentUser of round.currentUsers) {\n            const user = await this.context.loadUser(currentUser)\n            currentUsers.push(user)\n        }\n        this.props.setUsers(currentUsers)\n        this.props.setRound(round)\n        this.hasLoadedRound = true\n        this.isLoadingRound = false\n        this.removeFirebaseListeners()\n        this.addFirebaseListeners()\n        this.addUsersListeners()\n    }\n\n    addFirebaseListeners () {\n        const _this = this\n\n        // Round\n        this.context.db.collection('rounds').doc(this.props.round.id).onSnapshot(async (doc) => {\n            const updatedRound = doc.data()\n            console.log('### round change listener fired', this.props.round, updatedRound);\n            if (_.isNull(this.props.round)) {\n                // probably deleted round\n                _this.props.history.push('/rounds')\n                return\n            }\n            if (!this.isDisposing) {\n                if (!_.isEqual(_this.props.round.currentUsers, updatedRound.currentUsers)) {\n                    console.log('new user added or removed');\n                    let users = []\n                    for (const userId of updatedRound.currentUsers) {\n                        let user = await _this.context.loadUser(userId)\n                        users.push(user)\n                    }\n                    console.log('setUsers()', users);\n                    _this.props.setUsers(users)\n                    _this.props.setRoundCurrentUsers(updatedRound.currentUsers)\n                    _this.addUsersListeners()\n                }\n                if (!_.isEqual(_this.props.round.isPlaying, updatedRound.isPlaying)) {\n                    if (updatedRound.isPlaying) {\n                        AudioEngine.play()\n                        _this.props.setIsPlaying(true)\n                    } else {\n                        AudioEngine.stop()\n                        _this.props.setIsPlaying(false)\n                    }\n                }\n                if (!_.isEqual(_this.props.round.bpm, updatedRound.bpm)) {\n                    AudioEngine.setTempo(updatedRound.bpm)\n                    _this.props.setRoundBpm(updatedRound.bpm)\n                }\n                if (!_.isEqual(_this.props.round.swing, updatedRound.swing)) {\n                    AudioEngine.setSwing(updatedRound.swing)\n                    _this.props.setRoundSwing(updatedRound.swing)\n                }\n            }\n        })\n\n        // Layers\n        this.layersChangeListenerUnsubscribe = this.context.db.collection('rounds').doc(this.props.round.id).collection('layers').onSnapshot((layerCollectionSnapshot) => {\n            //  console.log('### layer change listener fired');\n            layerCollectionSnapshot.docChanges().forEach(change => {\n                if (change.type === 'modified') {\n                    //  console.log('Modified layer: ', change.doc.data());\n                    const layer = change.doc.data()\n                    if (layer.createdBy !== _this.props.user.id) {\n                        _this.reloadCollaborationLayersThrottled()\n                    } else {\n                        console.log('ignoring own firebase change');\n                    }\n                }\n                if (change.type === 'added') {\n                    //   console.log('New layer: ', change.doc.data());\n                    _this.reloadCollaborationLayersThrottled()\n                }\n                if (change.type === 'removed') {\n                    //    console.log('Removed layer: ', change.doc.data());\n                    _this.reloadCollaborationLayersThrottled()\n                }\n            });\n        })\n\n        // Userbus (FX)\n        this.userBusChangeListenerUnsubscribe = this.context.db.collection('rounds').doc(this.props.round.id).collection('userBuses').onSnapshot((userBusesCollectionSnapshot) => {\n            //  console.log('### userbus change listener fired');\n            userBusesCollectionSnapshot.docChanges().forEach(change => {\n                const userBus = change.doc.data()\n                userBus.id = change.doc.id\n                if (change.type === 'modified') {\n                    //  console.log('Modified userbus: ', change.doc.data(), _this.props.round.userBuses[userBus.id]);\n                    _this.handleUserBusChange(userBus)\n                }\n                if (change.type === 'added') {\n                    if (_.isNil(_this.props.round.userBuses[userBus.id])) {\n                        _this.props.addUserBus(userBus.id, userBus)\n                        AudioEngine.addUser(userBus.id, userBus.fx)\n                    }\n                }\n                if (change.type === 'removed') {\n                    //console.log('Removed userbus: ', change.doc.data());\n                }\n            });\n        })\n    }\n\n    removeFirebaseListeners () {\n        console.log('removeFirebaseListeners()');\n        if (!_.isNil(this.layersChangeListenerUnsubscribe)) {\n            this.layersChangeListenerUnsubscribe();\n        }\n        if (!_.isNil(this.userBusChangeListenerUnsubscribe)) {\n            this.userBusChangeListenerUnsubscribe();\n        }\n        this.removeUsersListeners()\n    }\n\n    addUsersListeners () {\n        this.removeUsersListeners()\n        this.usersChangeListenersUnsubscribe = []\n        const _this = this;\n        for (const user of this.props.users) {\n            let userListenerUnsubscribe = this.context.db.collection('users').doc(user.id).onSnapshot((doc) => {\n                console.log('### user change listener fired');\n                _this.loadUsers()\n            })\n            this.usersChangeListenersUnsubscribe.push(userListenerUnsubscribe)\n        }\n    }\n\n    async loadUsers () {\n        let users = []\n        for (const userId of this.props.round.currentUsers) {\n            let user = await this.context.loadUser(userId)\n            users.push(user)\n        }\n        console.log('setUsers()', users);\n        this.props.setUsers(users)\n        this.props.setRoundCurrentUsers(this.props.round.currentUsers)\n    }\n\n    removeUsersListeners () {\n        if (!_.isNil(this.usersChangeListenersUnsubscribe)) {\n            for (const unsubscribe of this.usersChangeListenersUnsubscribe) {\n                unsubscribe()\n            }\n        }\n    }\n\n    handleUserBusChange (userBus) {\n        let fxOrderChanged = false\n        for (let fx of userBus.fx) {\n            const currentFx = _.find(this.props.round.userBuses[userBus.id].fx, { id: fx.id })\n            if (!_.isEqual(fx.isOverride, currentFx.isOverride)) {\n                //  console.log('found fx override change', fx, currentFx);\n                AudioEngine.busesByUser[userBus.id].fx[fx.id].override = fx.isOverride\n                this.props.setUserBusFxOverride(userBus.id, fx.id, fx.isOverride)\n            }\n            if (!_.isEqual(fx.order, currentFx.order)) {\n                fxOrderChanged = true\n            }\n        }\n        if (fxOrderChanged) {\n            AudioEngine.busesByUser[userBus.id].setFxOrder(userBus.fx)\n        }\n    }\n\n    // if any of the subcollections for a collaboration user change, trigger a (throttled) reload of all collaboration layers as there could be multiple changes\n    // to do: maybe add an id to the query to make sure we don't overwrite the local round with an await result that comes in late\n    async reloadCollaborationLayers () {\n        console.log('reloadCollaborationLayers()');\n        const _this = this;\n        if (!_.isNil(this.props.round)) {\n            const newRound = await this.context.getRound(this.props.round.id)\n            const newLayers = _.filter(newRound.layers, (layer) => {\n                return layer.createdBy !== _this.props.user.id\n            })\n            const oldLayers = _.filter(this.props.round.layers, (layer) => {\n                return layer.createdBy !== _this.props.user.id\n            })\n            console.log('comparing layers', _.isEqual(newLayers, oldLayers));\n            if (!_.isEqual(newLayers, oldLayers)) {\n                const userLayers = _.filter(this.props.round.layers, (layer) => {\n                    return layer.createdBy === _this.props.user.id\n                })\n                const layers = [...userLayers, ...newLayers]\n                const round = _.cloneDeep(this.props.round)\n                round.layers = layers\n                this.props.setRound(round)\n            }\n        }\n    }\n\n    // user needs to click something in order to start audio context, if they're a collaborator then they may not click play so use the first click to start audio context\n    addStartAudioContextListener () {\n        window.addEventListener('touchstart', this.startAudioContext)\n    }\n    startAudioContext () {\n        console.log('startAudioContext()');\n        AudioEngine.startAudioContext()\n        this.removeStartAudioContextListener()\n    }\n    removeStartAudioContextListener () {\n        window.removeEventListener('touchstart', this.startAudioContext)\n    }\n\n    render () {\n        //  console.log('PlayRoute::render()', this.props.round);\n        const { classes, round } = this.props;\n        return (\n            <Box className={classes.root}>\n                {\n                    !_.isNil(round) &&\n                    <PlayUI />\n                }\n                {\n                    _.isNil(round) &&\n                    <Loader\n                        className={classes.loader}\n                        type=\"Puff\"\n                        color=\"#00BFFF\"\n                        height={100}\n                        width={100}\n                        visible={true}\n                    />\n                }\n                <PatternsSidebar />\n                <EffectsSidebar />\n                <ShareDialog />\n                <LayerSettings />\n            </Box>\n        )\n    }\n}\nconst mapStateToProps = state => {\n    return {\n        round: state.round,\n        user: state.user,\n        users: state.users\n    };\n};\n\n\nexport default connect(\n    mapStateToProps,\n    {\n        setRound,\n        setUsers,\n        setIsPlaying,\n        setUserBusFxOverride,\n        addUserBus,\n        setRoundCurrentUsers,\n        setRoundBpm,\n        setRoundSwing\n    }\n)(withStyles(styles)(PlayRoute));","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/components/landing-page/LandingPageRoute.js",["382"],"import React, { Component } from 'react'\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/styles';\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport { connect } from \"react-redux\";\nimport _ from 'lodash';\nimport { setIsShowingSignInDialog, setRedirectAfterSignIn } from '../../redux/actions'\nimport SignInDialog from '../dialogs/SignInDialog'\n\nconst styles = theme => ({\n    root: {\n        paddingTop: '64px',\n        height: '100%',\n        width: '100%',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    container: {\n        display: 'flex',\n        flexDirection: 'row',\n\n        width: '100%',\n        maxWidth: '1000px'\n    },\n    left: {\n        paddingRight: '2rem'\n    },\n    right: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center'\n    },\n    video: {\n        width: '520px',\n        height: '300px',\n        backgroundColor: '#303030'\n    },\n    getStartedButton: {\n        marginTop: '1rem'\n    }\n})\n\nclass LandingPageRoute extends Component {\n    constructor (props) {\n        super(props);\n        this.onGetStartedClick = this.onGetStartedClick.bind(this);\n    }\n    onGetStartedClick () {\n        if (!_.isNil(this.props.user)) {\n            // redirect to /play\n            this.props.history.push('/rounds')\n        } else {\n            // show sign in dialog\n            this.props.setRedirectAfterSignIn('/rounds')\n            this.props.setIsShowingSignInDialog(true)\n        }\n    }\n    render () {\n        const { classes } = this.props;\n        return (\n            <>\n                <Box className={classes.root}>\n                    <Box className={classes.container}>\n                        <Box className={classes.left}>\n                            <h1>Gather around, make music, and have fun.</h1>\n                            <p>Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt.</p>\n                            <Button className={classes.getStartedButton} variant=\"contained\" color=\"primary\" disableElevation onClick={this.onGetStartedClick}>Get started</Button>\n                        </Box>\n                        <Box className={classes.right}>\n                            <Box className={classes.video}>\n                            </Box>\n                        </Box>\n                    </Box>\n                </Box>\n\n            </>\n        )\n    }\n}\nLandingPageRoute.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = state => {\n    return {\n        user: state.user\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    {\n        setIsShowingSignInDialog,\n        setRedirectAfterSignIn\n    }\n)(withStyles(styles)(LandingPageRoute));\n","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/components/rounds-list-route/RoundsListRoute.js",["383","384"],"import React, { Component } from 'react'\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/styles';\nimport Box from '@material-ui/core/Box';\nimport Container from '@material-ui/core/Container';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\nimport ImageIcon from '@material-ui/icons/Image';\nimport AddIcon from '@material-ui/icons/Add';\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz';\nimport {\n    Link\n} from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport _ from 'lodash';\nimport {\n    setIsShowingSignInDialog, setRedirectAfterSignIn, setRounds, setIsShowingDeleteRoundDialog, setIsShowingRenameDialog, setSelectedRoundId\n} from '../../redux/actions'\nimport SignInDialog from '../dialogs/SignInDialog'\nimport { createRound } from '../../utils/index'\nimport { FirebaseContext } from '../../firebase';\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\nimport Grow from '@material-ui/core/Grow';\nimport Paper from '@material-ui/core/Paper';\nimport Popper from '@material-ui/core/Popper';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport { uuid } from '../../utils/index'\n\nconst styles = theme => ({\n    root: {\n        paddingTop: '64px'\n\n    },\n    header: {\n        display: 'flex',\n        width: '100%',\n        justifyContent: 'space-between',\n        alignItems: 'center'\n    }\n})\n\nclass RoundsListRoute extends Component {\n    static contextType = FirebaseContext;\n    constructor (props) {\n        super(props);\n        this.state = {\n            menuIsOpen: false,\n            anchorElement: null\n        }\n        this.onNewRoundClick = this.onNewRoundClick.bind(this)\n        this.onLaunchRoundClick = this.onLaunchRoundClick.bind(this)\n        this.onMenuClick = this.onMenuClick.bind(this)\n    }\n\n    async onNewRoundClick () {\n        console.log('create new round');\n        let newRound = createRound(this.props.user.id)\n        console.log('newRound', newRound);\n        let newRounds = [...this.props.rounds, newRound]\n        await this.context.createRound(newRound)\n        this.props.setRounds(newRounds)\n        // redirect to new round\n        this.onLaunchRoundClick(newRound.id)\n    }\n\n    onLaunchRoundClick (id) {\n        this.props.history.push('/play/' + id)\n    }\n\n    getCreatedString (round) {\n        const date = new Date(round.createdAt)\n        let dateString = date.toLocaleTimeString(\n            'en-gb',\n            {\n                year: 'numeric',\n                month: 'long',\n                day: 'numeric'\n            }\n        )\n        return dateString\n    }\n\n    onMenuClick (roundId, e) {\n        let element = e.currentTarget\n        console.log('onMenuClick', roundId, element);\n        this.props.setSelectedRoundId(roundId)\n        this.setState({\n            anchorElement: element,\n            menuIsOpen: true\n        })\n    }\n\n    onMenuClose = (event) => {\n        this.setState({\n            menuIsOpen: false\n        })\n        this.props.setSelectedRoundId(null)\n    }\n\n    onRenameClick = (roundId) => {\n        this.setState({\n            menuIsOpen: false\n        })\n        this.props.setIsShowingRenameDialog(true)\n    }\n    onDuplicateClick = async () => {\n        console.log('onDuplicateClick');\n        let selectedRound = await this.context.getRound(this.props.selectedRoundId)\n        let clonedRound = _.cloneDeep(selectedRound)\n        clonedRound.id = uuid()\n        clonedRound.name += ' (duplicate)'\n        clonedRound.createdAt = Date.now()\n        this.context.createRound(clonedRound)\n        let clonedRounds = _.cloneDeep(this.props.rounds)\n        clonedRounds.push(clonedRound)\n        this.props.setRounds(clonedRounds)\n        this.setState({\n            menuIsOpen: false\n        })\n    }\n    onDeleteClick = () => {\n        this.setState({\n            menuIsOpen: false\n        })\n        this.props.setIsShowingDeleteRoundDialog(true)\n    }\n\n    render () {\n        console.log('rendering rounds', this.props.rounds);\n\n        const { classes } = this.props;\n        const rounds = this.props.rounds;\n        return (\n            <>\n                <Container className={classes.root}>\n\n                    <Box className={classes.header}>\n                        <div><h1>My rounds</h1></div>\n                        <div>\n                            <Button className={classes.getStartedButton} variant=\"contained\" color=\"secondary\" disableElevation onClick={this.onNewRoundClick} startIcon={<AddIcon />}>New round</Button>\n                        </div>\n                    </Box>\n                    <Box>\n                        <List>\n                            {\n                                rounds.map((round) => (\n                                    <ListItem key={round.id} button onClick={this.onLaunchRoundClick.bind(this, round.id)}>\n                                        <ListItemAvatar>\n                                            <Avatar>\n                                                <ImageIcon />\n                                            </Avatar>\n                                        </ListItemAvatar>\n                                        <ListItemText primary={round.name} secondary={this.getCreatedString(round)} />\n                                        <ListItemSecondaryAction>\n                                            <IconButton\n                                                aria-controls={this.state.menuIsOpen ? 'menu-list-grow' : undefined}\n                                                aria-haspopup=\"true\"\n                                                onClick={this.onMenuClick.bind(this, round.id)}>\n                                                <MoreHorizIcon />\n                                            </IconButton>\n                                        </ListItemSecondaryAction>\n                                    </ListItem>\n                                ))\n                            }\n                        </List>\n                    </Box>\n                    <Popper open={this.state.menuIsOpen} anchorEl={this.state.anchorElement} role={undefined} transition disablePortal>\n                        {({ TransitionProps, placement }) => (\n                            <Grow\n                                {...TransitionProps}\n                                style={{ transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom' }}\n                            >\n                                <Paper size=\"md\">\n                                    <ClickAwayListener onClickAway={this.onMenuClose}>\n                                        <Box>\n                                            <MenuList autoFocusItem={this.state.menuIsOpen} id=\"menu-list-grow\">\n                                                <MenuItem onClick={this.onRenameClick} className={classes.menuListItem}>Rename</MenuItem>\n                                                <MenuItem onClick={this.onDuplicateClick} className={classes.menuListItem}>Duplicate</MenuItem>\n                                                <MenuItem onClick={this.onDeleteClick} className={classes.menuListItem}>Delete</MenuItem>\n\n                                            </MenuList>\n                                        </Box>\n                                    </ClickAwayListener>\n                                </Paper>\n                            </Grow>\n                        )}\n                    </Popper>\n                </Container>\n                <SignInDialog />\n            </>\n        )\n    }\n}\nRoundsListRoute.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = state => {\n    return {\n        user: state.user,\n        rounds: state.rounds,\n        selectedRoundId: state.display.selectedRoundId\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    {\n        setIsShowingSignInDialog,\n        setRedirectAfterSignIn,\n        setRounds,\n        setIsShowingDeleteRoundDialog,\n        setIsShowingRenameDialog,\n        setSelectedRoundId\n    }\n)(withStyles(styles)(RoundsListRoute));\n","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/components/header/Header.js",["385","386","387","388"],"import React, { useState, useEffect, useContext } from 'react'\nimport { connect } from \"react-redux\";\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport Box from '@material-ui/core/Box';\nimport {\n    Link\n} from \"react-router-dom\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport ShareIcon from '@material-ui/icons/Share';\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\nimport PlayButton from './PlayButton';\nimport { useLocation } from 'react-router-dom'\nimport { setUser, setIsShowingSignInDialog, setRedirectAfterSignIn, setRounds, setUserDisplayName, setSignUpDisplayName, setIsShowingShareDialog } from '../../redux/actions'\nimport _ from 'lodash'\nimport HeaderAvatar from './HeaderAvatar'\nimport JitsiComponent from '../play/JitsiComponent';\nimport ProjectName from './ProjectName'\nimport HeaderMenu from './HeaderMenu';\nimport { FirebaseContext } from '../../firebase';\n\n\nconst headerStyles = makeStyles((theme) => ({\n    root: {\n        height: '64px',\n        width: '100%',\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'space-between',\n        alignItems: 'center',\n        paddingLeft: '1rem',\n        paddingRight: '1rem',\n        position: 'fixed',\n        zIndex: 4,\n        backgroundColor: 'rgba(47,47,47,0.9)',\n    },\n    rightSide: {\n        display: 'flex',\n        alignItems: 'center'\n    },\n    rightSideChild: {\n        marginRight: '1rem',\n    },\n    roundAroundLogoButton: {\n        fontWeight: 600\n    },\n    avatars: {\n        display: 'flex',\n        marginRight: '1rem',\n        alignItems: 'center'\n    },\n    avatar: {\n        position: 'relative',\n\n    }\n}))\n\nfunction Header ({ user, users, round, setUser, setIsShowingSignInDialog, redirectAfterSignIn, setRedirectAfterSignIn, rounds, setRounds, signupDisplayName, setIsShowingShareDialog }) {\n    const firebaseContext = useContext(FirebaseContext);\n    const classes = headerStyles();\n    const location = useLocation();\n    const isPlayMode = location.pathname.includes('/play/') ? true : false\n\n    const [isUsingJitsi, setIsUsingJitsi] = useState(false)\n\n    const onSignInClick = () => {\n        setIsShowingSignInDialog(true)\n    }\n\n    const onJoinJitsiClick = () => {\n        setIsUsingJitsi(true)\n    }\n\n    const onLeaveJitsiClick = () => {\n        setIsUsingJitsi(false)\n\n    }\n\n    const onShareClick = () => {\n        setIsShowingShareDialog(true)\n    }\n\n    useEffect(() => {\n        firebaseContext.onUserUpdatedObservers.push(async (authUser) => {\n            if (!_.isNil(authUser)) {\n                // see if this user exists in users collection, if not then we're probably in the middle of signing up so ignore\n                let user = await firebaseContext.loadUser(authUser.uid)\n                if (!_.isNil(user)) {\n                    setUser(user)\n                    //if (!user.emailVerified) {\n                    //   console.log('need to verify email');\n                    //  } else {\n                    const rounds = await firebaseContext.getRoundsList(user.id, 1.5)\n                    setRounds(rounds)\n                    // }\n                } else {\n                    console.log('ignoring auth change, probably signing up');\n                }\n            } else {\n                console.log('signed out', location.pathname);\n                if (location.pathname !== '/') {\n                    setIsShowingSignInDialog(true)\n                }\n            }\n        })\n    }, [])\n\n    return (\n\n        <Box className={classes.root} bgcolor={\"background.default\"}>\n            {isPlayMode &&\n                <>\n                    <div>\n                        <IconButton to=\"/rounds\" component={Link}>\n                            <ArrowBackIosIcon />\n                        </IconButton>\n                    </div>\n                    <div>\n                        {\n                            round &&\n                            <div><ProjectName name={round.name} /></div>\n                        }\n                        {\n                            _.isNil(round) &&\n                            <div>Loading...</div>\n\n                        }\n                    </div>\n                    <Box className={classes.rightSide} >\n                        <Box className={classes.avatars}>\n                            {\n                                users.map((currentUser) => (\n                                    <HeaderAvatar className={classes.avatar} key={currentUser.id} user={currentUser} users={users} shouldShowMenu={!_.isNil(user) && (currentUser.id === user.id)} />\n                                ))\n                            }\n                        </Box>\n                        <JitsiComponent />\n                        <div>\n                            <Button className={classes.rightSideChild} onClick={onShareClick} variant=\"contained\" color=\"secondary\" disableElevation startIcon={<ShareIcon />}>Share</Button>\n                        </div>\n                        <div>\n                            <PlayButton className={classes.rightSideChild} />\n                        </div>\n                        <div>\n                            <HeaderMenu />\n                        </div>\n                    </Box>\n                </>\n            }\n            {!isPlayMode &&\n                <>\n                    <div></div>\n                    <div><Button className={classes.roundAroundLogoButton} component={Link} to=\"/\">RoundAround</Button></div>\n                    {\n                        user &&\n                        <HeaderAvatar user={user} users={users} shouldShowMenu={true} />\n                    }\n                    {\n                        !user &&\n                        <Button variant=\"contained\" color=\"secondary\" disableElevation onClick={onSignInClick}>Sign in</Button>\n                    }\n\n                </>\n            }\n\n\n        </Box >\n    )\n}\nconst mapStateToProps = state => {\n    return {\n        user: state.user,\n        users: state.users,\n        redirectAfterSignIn: state.display.redirectAfterSignIn,\n        signupDisplayName: state.display.signupDisplayName,\n        rounds: state.rounds,\n        round: state.round\n    };\n};\nexport default connect(\n    mapStateToProps,\n    {\n        setUser,\n        setUserDisplayName,\n        setSignUpDisplayName,\n        setIsShowingSignInDialog,\n        setRedirectAfterSignIn,\n        setRounds,\n        setIsShowingShareDialog\n    }\n)(Header);","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/components/dialogs/SignInDialog.js",["389"],"import React, { useState, useEffect, useContext, useRef } from 'react';\nimport { connect } from \"react-redux\";\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport IconButton from '@material-ui/core/IconButton';\nimport TextField from '@material-ui/core/TextField';\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { setIsShowingSignInDialog, setSignUpDisplayName, setUser, setRounds } from '../../redux/actions'\nimport { FirebaseContext } from '../../firebase';\nimport firebase from \"firebase/app\";\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport { getRandomColor } from '../../utils/index'\n\nimport _ from 'lodash'\n\nconst styles = makeStyles({\n    title: {\n        textAlign: 'center'\n    },\n    body: {\n        padding: '1rem',\n        borderTop: 'solid 1px rgba(255,255,255,0.1)'\n    },\n    button: {\n        marginBottom: '1rem',\n        textAlign: 'center'\n    },\n    emailForm: {\n        display: 'flex',\n        flexDirection: 'column'\n    },\n    emailFormItem: {\n        marginBottom: '1rem',\n        minWidth: '300px'\n    },\n    signUpButton: {\n        fontWeight: 600\n    },\n    backButton: {\n        position: 'absolute',\n        left: 4,\n        top: 8\n    },\n    error: {\n        textAlign: 'center',\n        marginBottom: '2rem',\n        fontWeight: 600\n    }\n})\n\nconst SignInDialog = ({ isShowingSignInDialog, setIsShowingSignInDialog, setSignUpDisplayName, setUser, setRounds }) => {\n    const firebaseContext = useContext(FirebaseContext);\n    const onClose = () => {\n        setIsShowingEmailForm(false)\n        setIsShowingEmailSignupForm(false)\n        setErrorMessage(null)\n        setIsShowingSignInDialog(false)\n        setIsShowingUseAsGuestForm(false)\n    }\n    const [isShowingEmailForm, setIsShowingEmailForm] = useState(false)\n    const [isShowingUseAsGuestForm, setIsShowingUseAsGuestForm] = useState(false)\n    const [isShowingEmailSignupForm, setIsShowingEmailSignupForm] = useState(false)\n    const [errorMessage, setErrorMessage] = useState(null)\n\n    const emailAddressInput = useRef()\n    const emailAddressSignupInput = useRef()\n    const passwordInput = useRef()\n    const passwordSignupInput = useRef()\n    const displayNameSignupInput = useRef()\n    const displayNameGuestInput = useRef()\n\n    const onGoogleSigninClick = async () => {\n        onClose()\n        let provider = new firebase.auth.GoogleAuthProvider();\n        try {\n            const authResult = await firebaseContext.auth.signInWithPopup(provider)\n            const authUser = authResult.user\n            let user = await firebaseContext.loadUser(authUser.uid)\n            if (_.isNil(user)) {\n                //new user, create user document\n                user = {\n                    displayName: authUser.displayName,\n                    email: authUser.email,\n                    avatar: authUser.photoURL,\n                    id: authUser.uid,\n                    color: getRandomColor(),\n                    isGuest: false,\n                }\n                console.log('creating user', user);\n                await firebaseContext.createUser(user)\n            }\n        } catch (e) {\n            console.log('error logging in');\n        }\n    }\n\n    const onShowEmailSigninClick = () => {\n        setIsShowingEmailForm(true)\n    }\n\n    const onEmailSigninClick = async () => {\n        const email = emailAddressInput.current.querySelectorAll(\"input\")[0].value\n        const password = passwordInput.current.querySelectorAll(\"input\")[0].value\n        try {\n            await firebaseContext.auth.signInWithEmailAndPassword(email, password)\n            onClose()\n        } catch (e) {\n            console.log('email error', e);\n            setErrorMessage(e.message)\n        }\n    }\n\n    const onEmailSignupClick = async () => {\n        const email = emailAddressSignupInput.current.querySelectorAll(\"input\")[0].value\n        const password = passwordSignupInput.current.querySelectorAll(\"input\")[0].value\n        const displayName = displayNameSignupInput.current.querySelectorAll(\"input\")[0].value\n        if (!_.isEmpty(displayName)) {\n            try {\n                const authResult = await firebaseContext.auth.createUserWithEmailAndPassword(email, password)\n                const authUser = authResult.user\n                console.log('authResult', authResult);\n                let user = {\n                    displayName,\n                    email: email,\n                    id: authUser.uid,\n                    color: getRandomColor(),\n                    isGuest: false,\n                }\n                console.log('creating user', user);\n                await firebaseContext.createUser(user)\n                setUser(user)\n                onClose()\n\n            } catch (e) {\n                console.log('email error', e);\n                setErrorMessage(e.message)\n            }\n        } else {\n            setErrorMessage('Please enter a name')\n        }\n    }\n\n    const onShowEmailSignupClick = () => {\n        setIsShowingEmailForm(false)\n        setIsShowingEmailSignupForm(true)\n        setIsShowingUseAsGuestForm(false)\n    }\n\n    const onUseAsGuestClick = () => {\n        setIsShowingUseAsGuestForm(true)\n    }\n\n    const onContinueAsGuestClick = async () => {\n        const displayName = displayNameGuestInput.current.querySelectorAll(\"input\")[0].value\n        if (!_.isEmpty(displayName)) {\n            try {\n                const authResult = await firebaseContext.auth.signInAnonymously()\n                console.log('authResult', authResult);\n                const authUser = authResult.user\n                console.log('authUser', authUser);\n                let user = {\n                    isGuest: true,\n                    displayName,\n                    id: authUser.uid,\n                    color: getRandomColor()\n                }\n                console.log('creating user', user);\n                await firebaseContext.createUser(user)\n                setUser(user)\n                onClose()\n\n            } catch (e) {\n                console.log('email error', e);\n                setErrorMessage(e.message)\n            }\n        } else {\n            setErrorMessage('Please enter a name')\n        }\n    }\n\n    const onBackClick = () => {\n        setIsShowingEmailForm(false)\n        setIsShowingEmailSignupForm(false)\n        setErrorMessage(null)\n        setIsShowingUseAsGuestForm(false)\n    }\n\n    const classes = styles();\n\n    return (\n        <>\n            <Dialog onClose={onClose} aria-labelledby=\"simple-dialog-title\" open={isShowingSignInDialog}>\n                {\n                    !isShowingEmailForm && !isShowingEmailSignupForm && !isShowingUseAsGuestForm &&\n                    <>\n                        <DialogTitle className={classes.title} id=\"simple-dialog-title\">\n\n                            Sign in\n                        </DialogTitle>\n                        <Box className={classes.body}>\n                            <Button className={classes.button} fullWidth color=\"secondary\" variant=\"contained\" disableElevation onClick={onGoogleSigninClick}>Continue with Google</Button>\n                            <Button className={classes.button} fullWidth color=\"secondary\" variant=\"contained\" disableElevation onClick={onShowEmailSigninClick}>Sign in with email</Button>\n                            <Button className={classes.button} fullWidth color=\"secondary\" variant=\"contained\" disableElevation onClick={onUseAsGuestClick}>Use as guest</Button>\n                            <p style={{ textAlign: 'center' }}>Don't have an account yet?</p>\n                            <Button className={classes.signUpButton} fullWidth disableElevation onClick={onShowEmailSignupClick}>Sign up</Button>\n                        </Box>\n                    </>\n                }\n                {\n                    isShowingEmailForm &&\n                    <>\n                        <DialogTitle className={classes.title} id=\"simple-dialog-title\"><IconButton aria-label=\"close\" className={classes.backButton} onClick={onBackClick}>\n                            <ArrowBackIcon />\n                        </IconButton>Sign in with email</DialogTitle>\n                        <Box className={classes.body}>\n                            <form className={classes.emailForm} noValidate autoComplete=\"off\">\n                                <TextField type=\"email\" ref={emailAddressInput} className={classes.emailFormItem} label=\"Email address\" variant=\"outlined\" />\n                                <TextField ref={passwordInput} className={classes.emailFormItem} label=\"Password\" variant=\"outlined\" type=\"password\" />\n                                {\n                                    errorMessage &&\n                                    <p className={classes.error}>{errorMessage}</p>\n                                }\n                                <Button className={classes.button} fullWidth color=\"primary\" variant=\"contained\" disableElevation onClick={onEmailSigninClick} ><strong>Sign in</strong></Button>\n                            </form>\n\n                        </Box>\n                    </>\n                }\n                {\n                    isShowingUseAsGuestForm &&\n                    <>\n                        <DialogTitle className={classes.title} id=\"simple-dialog-title\"><IconButton aria-label=\"close\" className={classes.backButton} onClick={onBackClick}>\n                            <ArrowBackIcon />\n                        </IconButton>Continue as guest</DialogTitle>\n                        <Box className={classes.body}>\n                            <form className={classes.emailForm} noValidate autoComplete=\"off\">\n                                <TextField ref={displayNameGuestInput} className={classes.emailFormItem} label=\"Name\" variant=\"outlined\" />\n                                {\n                                    errorMessage &&\n                                    <p className={classes.error}>{errorMessage}</p>\n                                }\n                                <Button className={classes.button} fullWidth color=\"primary\" variant=\"contained\" disableElevation onClick={onContinueAsGuestClick} ><strong>Continue as guest</strong></Button>\n                            </form>\n\n                        </Box>\n                    </>\n                }\n                {\n                    isShowingEmailSignupForm &&\n                    <>\n                        <DialogTitle className={classes.title} id=\"simple-dialog-title\"><IconButton aria-label=\"close\" className={classes.backButton} onClick={onBackClick}>\n                            <ArrowBackIcon />\n                        </IconButton>Sign up with email</DialogTitle>\n                        <Box className={classes.body}>\n                            <form className={classes.emailForm} noValidate autoComplete=\"off\">\n                                <TextField ref={displayNameSignupInput} className={classes.emailFormItem} label=\"Name\" variant=\"outlined\" />\n                                <TextField type=\"email\" ref={emailAddressSignupInput} className={classes.emailFormItem} label=\"Email address\" variant=\"outlined\" />\n                                <TextField ref={passwordSignupInput} className={classes.emailFormItem} label=\"Password\" variant=\"outlined\" type=\"password\" />\n                                {\n                                    errorMessage &&\n                                    <p className={classes.error}>{errorMessage}</p>\n                                }\n                                <Button className={classes.button} fullWidth color=\"primary\" variant=\"contained\" disableElevation onClick={onEmailSignupClick} ><strong>Sign up</strong></Button>\n                            </form>\n\n                        </Box>\n                    </>\n                }\n\n            </Dialog>\n        </>\n    );\n}\n\nconst mapStateToProps = state => {\n    return {\n        user: state.user,\n        isShowingSignInDialog: state.display.isShowingSignInDialog\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    {\n        setIsShowingSignInDialog,\n        setSignUpDisplayName,\n        setUser,\n        setRounds\n    }\n)(SignInDialog);\n\n","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/components/dialogs/RenameDialog.js",["390"],"import React, { useContext, useRef, useEffect } from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { connect } from \"react-redux\";\nimport { setRoundName, setIsShowingRenameDialog, setRounds, setDisableKeyListener } from '../../redux/actions'\nimport { FirebaseContext } from '../../firebase';\nimport _ from 'lodash'\n\nfunction RenameDialog ({ selectedRoundId, round, rounds, setRoundName, setIsShowingRenameDialog, isShowingRenameDialog, setRounds, setDisableKeyListener }) {\n    const firebase = useContext(FirebaseContext);\n    const textField = useRef(null)\n    const handleClose = () => {\n        setIsShowingRenameDialog(false)\n\n    }\n    const onOkClick = () => {\n        const newName = textField.current.querySelectorAll(\"input\")[0].value\n        console.log('on rename click', newName);\n        let roundsClone = _.cloneDeep(rounds)\n        let selectedRound = _.find(roundsClone, { id: selectedRoundId })\n        selectedRound.name = newName\n        setRounds(roundsClone)\n        if (!_.isNil(round) && round.id === selectedRoundId) {\n            setRoundName(newName)\n        }\n        firebase.updateRound(selectedRoundId, { name: newName })\n        setIsShowingRenameDialog(false)\n    }\n    useEffect(() => {\n        if (isShowingRenameDialog) {\n            setDisableKeyListener(true)\n        } else {\n            setDisableKeyListener(false)\n        }\n    }, [isShowingRenameDialog])\n    return (\n        <Dialog open={isShowingRenameDialog} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n            <DialogTitle id=\"form-dialog-title\">Rename</DialogTitle>\n            <DialogContent>\n                <TextField\n                    ref={textField}\n                    defaultValue={round ? round.name : ''}\n                    autoFocus\n                    margin=\"dense\"\n                    id=\"name\"\n                    fullWidth\n                />\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={handleClose}>\n                    Cancel\n          </Button>\n                <Button onClick={onOkClick}>\n                    Rename\n          </Button>\n            </DialogActions>\n        </Dialog>\n    )\n}\nconst mapStateToProps = state => {\n    return {\n        selectedRoundId: state.display.selectedRoundId,\n        round: state.round,\n        isShowingRenameDialog: state.display.isShowingRenameDialog,\n        rounds: state.rounds\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    {\n        setRoundName,\n        setIsShowingRenameDialog,\n        setRounds,\n        setDisableKeyListener\n    }\n)(RenameDialog);","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/components/dialogs/DeleteRoundDialog.js",["391","392","393"],"import React, { useContext, useRef, useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { connect } from \"react-redux\";\nimport { FirebaseContext } from '../../firebase';\nimport { setIsShowingDeleteRoundDialog, setRounds, setRound } from '../../redux/actions'\nimport _ from 'lodash'\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nfunction DeleteRoundDialog ({ isShowingDeleteRoundDialog, selectedRoundId, rounds, setRounds, setRound, round, setIsShowingDeleteRoundDialog }) {\n    const firebase = useContext(FirebaseContext);\n    const [isDeleting, setIsDeleting] = useState(false)\n    const handleClose = () => {\n        setIsShowingDeleteRoundDialog(false)\n    }\n    const onOkClick = async () => {\n        console.log('on delete click');\n        setIsDeleting(true)\n        let roundsClone = _.cloneDeep(rounds)\n        _.remove(roundsClone, { id: selectedRoundId })\n        if (!_.isNil(round) && round.id === selectedRoundId) {\n            setRound(null)\n        }\n        // load round so we have all the layers etc\n        let selectedRound = await firebase.getRound(selectedRoundId)\n        await firebase.deleteRound(selectedRound)\n        console.log('setting rounds to ', roundsClone);\n        setRounds(roundsClone)\n        setIsDeleting(false)\n        setIsShowingDeleteRoundDialog(false)\n    }\n    return (\n        <Dialog open={isShowingDeleteRoundDialog} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n            <DialogTitle id=\"form-dialog-title\">Are you sure you want to delete this round?</DialogTitle>\n            <DialogContent>\n\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={handleClose}>\n                    Cancel\n          </Button>\n                <Button onClick={onOkClick} >\n                    {\n                        !isDeleting &&\n                        <p>Delete</p>\n                    }\n                    {\n                        isDeleting &&\n                        <CircularProgress size={24} />\n                    }\n                </Button>\n            </DialogActions>\n        </Dialog>\n    )\n}\nconst mapStateToProps = state => {\n    return {\n        round: state.round,\n        selectedRoundId: state.display.selectedRoundId,\n        rounds: state.rounds,\n        isShowingDeleteRoundDialog: state.display.isShowingDeleteRoundDialog\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    {\n        setRound,\n        setRounds,\n        setIsShowingDeleteRoundDialog\n    }\n)(DeleteRoundDialog);","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/redux/reducers/index.js",[],"/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/redux/actionTypes.js",[],"/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/components/header/PlayButton.js",[],"/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/components/header/HeaderAvatar.js",["394","395"],"import React, { useContext } from 'react'\nimport { connect } from \"react-redux\";\nimport Box from '@material-ui/core/Box';\nimport Avatar from '@material-ui/core/Avatar';\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\nimport Grow from '@material-ui/core/Grow';\nimport Paper from '@material-ui/core/Paper';\nimport Popper from '@material-ui/core/Popper';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport Divider from '@material-ui/core/Divider';\nimport { makeStyles } from '@material-ui/core/styles';\nimport IconButton from '@material-ui/core/IconButton';\nimport FullscreenIcon from '@material-ui/icons/Fullscreen';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport _ from 'lodash'\nimport { FirebaseContext } from '../../firebase';\nimport {\n    setUser, setRounds, setUsers, setRound, setUserColor\n} from '../../redux/actions'\nimport { CirclePicker } from 'react-color'\nimport { Colors } from '../../utils/constants'\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n    },\n    paper: {\n        marginRight: theme.spacing(2),\n        borderRadius: '16px'\n    },\n    colorPicker: {\n        padding: '1rem'\n    },\n    menuList: {\n    },\n    menuListItem: {\n        paddingTop: '1rem',\n        paddingBottom: '1rem',\n        textAlign: 'center'\n    },\n    avatar: props => ({\n        border: 'solid 2px ' + props.userColor\n    }),\n    avatarInitialsOnly: props => ({\n        backgroundColor: props.userColor,\n        color: '#FFFFFF'\n    }),\n    userDisplayName: {\n        marginTop: 0,\n        marginBottom: '0rem',\n        paddingTop: '1rem',\n        marginLeft: '1rem',\n        marginRight: '1rem'\n    },\n    userEmail: {\n        marginLeft: '1rem',\n        marginRight: '1rem',\n        marginTop: 0,\n        fontWeight: 500\n    }\n\n}));\n\nfunction HeaderAvatar ({ user, users, setUser, setRounds, shouldShowMenu, setUsers, setRound, setUserColor }) {\n    const firebaseContext = useContext(FirebaseContext)\n\n    const [open, setOpen] = React.useState(false);\n    const anchorRef = React.useRef(null);\n\n    const handleToggle = () => {\n        setOpen((prevOpen) => !prevOpen);\n    };\n\n    const handleClose = (event) => {\n        if (anchorRef.current && anchorRef.current.contains(event.target)) {\n            return;\n        }\n\n        setOpen(false);\n    };\n\n    function handleListKeyDown (event) {\n        if (event.key === 'Tab') {\n            event.preventDefault();\n            setOpen(false);\n        }\n    }\n\n    const onSignOutClick = () => {\n        firebaseContext.signOut()\n        setRounds([])\n        setUser(null)\n        setRound(null)\n        setUsers([])\n    }\n\n    const getInitials = (name) => {\n        console.log('getInitials()', user);\n        let initials = '??'\n        if (!_.isNil(name)) {\n            const nameParts = name.split(' ')\n            if (nameParts.length > 1) {\n                initials = nameParts[0][0] + nameParts[1][0]\n            } else {\n                initials = name[0]\n                if (name.length > 1) {\n                    initials += name[1]\n                }\n            }\n        }\n        return initials\n    }\n\n    const onColorChosen = ({ hex }) => {\n        console.log('hex', hex);\n        setUserColor(hex)\n        firebaseContext.updateUser(user.id, { color: hex })\n        let usersClone = _.cloneDeep(users)\n        let me = _.find(usersClone, { id: user.id })\n        me.color = hex\n        setUsers(usersClone)\n    }\n\n    // return focus to the button when we transitioned from !open -> open\n    const prevOpen = React.useRef(open);\n    React.useEffect(() => {\n        if (prevOpen.current === true && open === false) {\n            anchorRef.current.focus();\n        }\n\n        prevOpen.current = open;\n    }, [open]);\n\n    const classes = useStyles({ userColor: user.color });\n\n    return (\n        <div className={classes.root}>\n\n            <div>\n                {\n                    shouldShowMenu &&\n                    <>\n                        <IconButton\n                            ref={anchorRef}\n                            aria-controls={open ? 'menu-list-grow' : undefined}\n                            aria-haspopup=\"true\"\n                            onClick={handleToggle}>\n                            {\n                                !_.isNil(user.avatar) &&\n                                <Avatar className={classes.avatar} alt={user.displayName} src={user.avatar} />\n                            }\n                            {\n                                _.isNil(user.avatar) &&\n                                <Avatar className={classes.avatarInitialsOnly} alt={user.displayName} >{getInitials(user.displayName)}</Avatar>\n                            }\n                        </IconButton>\n\n                        <Popper open={open} anchorEl={anchorRef.current} role={undefined} transition disablePortal>\n                            {({ TransitionProps, placement }) => (\n                                <Grow\n                                    {...TransitionProps}\n                                    style={{ transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom' }}\n                                >\n                                    <Paper size=\"md\">\n                                        <ClickAwayListener onClickAway={handleClose}>\n                                            <Box >\n\n                                                <h2 className={classes.userDisplayName}>{user.displayName}</h2>\n                                                <h3 className={classes.userEmail}>{user.email}</h3>\n                                                <CirclePicker className={classes.colorPicker} onChangeComplete={onColorChosen} colors={Colors} />\n                                                <Divider />\n                                                <MenuList autoFocusItem={open} id=\"menu-list-grow\" onKeyDown={handleListKeyDown}>\n                                                    <MenuItem onClick={onSignOutClick} className={classes.menuListItem}>Sign out</MenuItem>\n                                                </MenuList>\n                                            </Box>\n                                        </ClickAwayListener>\n                                    </Paper>\n                                </Grow>\n                            )}\n                        </Popper>\n\n                    </>\n                }\n                {\n                    !shouldShowMenu &&\n                    <>\n                        {\n                            !_.isNil(user.avatar) &&\n                            <IconButton disabled={true}>\n                                <Avatar className={classes.avatar} alt={user.displayName} src={user.avatar} />\n                            </IconButton>\n                        }\n                        {\n                            _.isNil(user.avatar) &&\n                            <IconButton disabled={true}>\n                                <Avatar className={classes.avatarInitialsOnly} alt={user.displayName} >{getInitials(user.displayName)}</Avatar>\n                            </IconButton>\n                        }\n                    </>\n                }\n\n            </div>\n        </div >\n    );\n}\nexport default connect(\n    null,\n    {\n        setUser,\n        setUsers,\n        setRound,\n        setRounds,\n        setUserColor\n    }\n)(HeaderAvatar);","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/components/play/JitsiComponent.js",["396"],"import React, { Component } from 'react'\nimport { connect } from \"react-redux\";\nimport { FirebaseContext } from '../../firebase';\nimport _ from 'lodash'\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/styles';\nimport IconButton from '@material-ui/core/IconButton';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport MicIcon from '@material-ui/icons/Mic';\nimport MicOffIcon from '@material-ui/icons/MicOff';\nimport CallIcon from '@material-ui/icons/Call';\nimport CallEndIcon from '@material-ui/icons/CallEnd';\n\nconst styles = theme => ({\n    root: {\n        position: 'absolute',\n        top: 0,\n        left: -600\n    },\n    micButton: {\n        backgroundColor: theme.palette.secondary.main,\n        marginRight: '1rem'\n    },\n    micButtonOn: {\n        color: theme.palette.secondary.main,\n        backgroundColor: theme.palette.primary.main,\n        marginRight: '1rem',\n        '&:hover': {\n            backgroundColor: theme.palette.primary.dark,\n        }\n    }\n})\n\nclass JitsiComponent extends Component {\n    static contextType = FirebaseContext;\n    constructor (props) {\n        super(props);\n        this.state = {\n            isEnabled: false,\n            isConnecting: false\n        }\n        this.join = this.join.bind(this)\n        this.leave = this.leave.bind(this)\n        this.onMicClick = this.onMicClick.bind(this)\n    }\n\n    async join () {\n        this.setState({\n            isEnabled: true,\n            isConnecting: true,\n            micIsEnabled: true\n        })\n\n        const roomName = this.props.roomName\n        const tokenResult = await this.context.getJitsiToken(this.props.user.id, '', '', '')\n        console.log('jitsi token', tokenResult);\n        const jwt = tokenResult.data.token;\n\n        // eslint-disable-next-line no-undef\n        this.api = new JitsiMeetExternalAPI(\"8x8.vc\", {\n            roomName: \"vpaas-magic-cookie-ed842ad0fbe8446fbfeb14c7580a7f71/\" + roomName,\n            width: 600,\n            height: 400,\n            userInfo: {\n                email: 'john.doe@company.com',\n                displayName: 'Qwe'\n            },\n            configOverwrite: {\n                prejoinPageEnabled: false,\n                startVideoMuted: true,\n                disableInviteFunctions: true\n            },\n            parentNode: document.querySelector('#jaas-container'),\n            jwt\n        });\n        const _this = this\n        this.api.on('videoConferenceJoined', async (e) => {\n            console.log('videoConferenceJoined', e);\n            let isVideoMuted = await _this.api.isVideoMuted()\n            console.log('isVideoMuted', isVideoMuted);\n            if (!isVideoMuted) {\n                _this.api.executeCommand('toggleVideo');\n\n                _this.setState({\n                    isConnecting: false\n                })\n\n            }\n        })\n    }\n\n    leave () {\n        this.setState({\n            isEnabled: false,\n            isConnecting: false\n        })\n        this.api.executeCommand('hangup');\n        this.api.dispose()\n    }\n\n    async onMicClick () {\n        let audioIsMuted = await this.api.isAudioMuted()\n        this.api.executeCommand('toggleAudio');\n        audioIsMuted = !audioIsMuted\n        this.setState({\n            micIsEnabled: !audioIsMuted\n        })\n    }\n\n\n    render () {\n        const { classes } = this.props;\n        return (\n            <>\n                {\n                    !this.state.isEnabled &&\n                    <IconButton className={classes.micButton} onClick={this.join}>\n                        <CallIcon />\n                    </IconButton>\n\n                }\n                {\n                    (this.state.isEnabled && this.state.isConnecting) &&\n                    <IconButton className={classes.micButton}>\n                        <CircularProgress size={24} />\n                    </IconButton>\n                }\n                {\n                    (this.state.isEnabled && !this.state.isConnecting) &&\n                    <IconButton className={classes.micButtonOn} onClick={this.leave}>\n                        <CallEndIcon />\n                    </IconButton>\n                }\n                {\n                    this.state.micIsEnabled &&\n                    <IconButton className={classes.micButton} onClick={this.onMicClick} disabled={!this.state.isEnabled}>\n                        <MicIcon />\n                    </IconButton>\n\n                }\n                {\n                    !this.state.micIsEnabled &&\n                    <IconButton className={classes.micButton} onClick={this.onMicClick} disabled={!this.state.isEnabled}>\n                        <MicOffIcon />\n                    </IconButton>\n\n                }\n                <div className={classes.root}>\n                    <div id=\"jaas-container\" style={{ height: \"100%\" }}></div>\n                </div >\n            </>\n        )\n    }\n}\n\nJitsiComponent.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = state => {\n    //console.log('mapStateToProps', state);\n    return {\n        round: state.round,\n        display: state.display,\n        user: state.user\n    };\n};\n\n\nexport default connect(\n    mapStateToProps, {\n\n}\n)(withStyles(styles)(JitsiComponent));\n","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/components/header/ProjectName.js",[],"/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/components/header/HeaderMenu.js",[],"/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/components/play/PlayUI.js",["397","398"],"import React, { Component, useContext } from 'react';\nimport * as _ from 'lodash';\n//import styles from './HtmlUi.scss'\nimport { SVG } from '@svgdotjs/svg.js'\nimport '@svgdotjs/svg.panzoom.js'\nimport { HTML_UI_Params, KEY_MAPPINGS } from '../../utils/constants'\nimport { connect } from \"react-redux\";\nimport AudioEngine from '../../audio-engine/AudioEngine'\nimport Instruments from '../../audio-engine/Instruments'\nimport FX from '../../audio-engine/FX'\nimport { getDefaultLayerData } from '../../utils/defaultData';\nimport { TOGGLE_STEP, ADD_LAYER, SET_STEP_PROBABILITY, SET_STEP_VELOCITY, SET_SELECTED_LAYER_ID, SET_IS_SHOWING_LAYER_SETTINGS, SET_IS_PLAYING } from '../../redux/actionTypes'\nimport { FirebaseContext } from '../../firebase/'\nimport * as Tone from 'tone';\nimport { withStyles } from '@material-ui/styles';\nimport PropTypes from 'prop-types';\n\nconst styles = theme => ({\n    button: {\n        cursor: 'pointer'\n    },\n    buttonIcon: {\n        pointerEvents: 'none'\n    }\n})\n\nclass PlayUI extends Component {\n    static contextType = FirebaseContext\n    constructor (props) {\n        super(props)\n        this.isZooming = false\n        this.isPanning = false\n        this.stepGraphics = []\n        this.layerGraphics = []\n        this.round = null; // local copy of round, prevent mutating store.\n        this.isOn = false\n        this.editAllLayers = false\n        this.userColors = {};\n        this.onWindowResizeThrottled = _.throttle(this.onWindowResize.bind(this), 1000)\n        this.selectedLayerId = null;\n        this.onKeypress = this.onKeypress.bind(this)\n        this.onOutsideClick = this.onOutsideClick.bind(this)\n    }\n\n    componentDidMount () {\n        this.createRound()\n        AudioEngine.init()\n        Instruments.init()\n        FX.init()\n        AudioEngine.load(this.props.round)\n        window.addEventListener('resize', this.onWindowResizeThrottled)\n        window.addEventListener('keypress', this.onKeypress)\n        this.addBackgroundEventListeners()\n    }\n\n    async componentWillUnmount () {\n        window.removeEventListener('resize', this.onWindowResizeThrottled)\n        window.removeEventListener('keypress', this.onKeypress)\n        this.removeBackgroundEventListeners()\n        this.clear()\n        this.disposeToneEvents()\n    }\n\n    createRound () {\n        //console.log('createRound()');\n        this.round = _.cloneDeep(this.props.round)\n        this.userColors = this.getUserColors()\n        // Create SVG container\n        this.containerWidth = Math.max(document.documentElement.clientWidth || 0, window.innerWidth || 0)\n        this.containerHeight = Math.max(document.documentElement.clientHeight || 0, window.innerHeight || 0)\n        const roundElement = document.getElementById('round')\n        roundElement.style.width = this.containerWidth + 'px'\n        roundElement.style.height = this.containerHeight + 'px'\n        this.container = SVG()\n            .addTo(roundElement)\n            .size(this.containerWidth, this.containerHeight)\n            .panZoom({ zoomMin: 0.2, zoomMax: 1.3, zoomFactor: 0.2 })\n        this.container.on('panning', (e) => {\n            //  console.log('round panning');\n            if (this.stepIsPanning) {\n                e.preventDefault()\n            }\n        })\n        this.container.viewbox(0, 0, this.containerWidth, this.containerHeight)\n        this.draw()\n    }\n\n    async componentDidUpdate () {\n        // console.log('componentDidUpdate()', this.props.round)\n\n        // Calculate what's changed so we only redraw if necessary\n        let redraw = false\n        const _this = this\n\n        if (this.round.id !== this.props.round.id) {\n            // whole round has changed\n            this.round = _.cloneDeep(this.props.round)\n            AudioEngine.load(this.props.round)\n            this.draw()\n            return\n        }\n\n        if (this.round.bpm !== this.props.round.bpm) {\n            this.round.bpm = this.props.round.bpm\n            AudioEngine.setTempo(this.round.bpm)\n            this.reclaculateIndicatorAnimation()\n        }\n\n        // User profile color changed\n        const userColors = this.getUserColors()\n        if (!_.isEqual(userColors, this.userColors)) {\n            this.userColors = userColors\n            redraw = true\n        }\n\n        // Edit all interactions changed\n        if (this.editAllLayers !== this.props.editAllLayers) {\n            this.editAllLayers = this.props.editAllLayers\n            this.removeAllStepEventListeners()\n            for (let layerGraphic of this.layerGraphics) {\n                if (this.editAllLayers) {\n                    layerGraphic.isAllowedInteraction = true\n                } else {\n                    //  console.log('layer', _.find(this.props.round.layers, { id: layerGraphic.id }));\n                    const layer = _.find(this.props.round.layers, { id: layerGraphic.id })\n                    if (!_.isNil(layer)) {\n                        layerGraphic.isAllowedInteraction = layer.createdBy === this.props.user.id\n                    }\n                }\n                this.addLayerEventListeners(layerGraphic)\n            }\n            for (let stepGraphic of this.stepGraphics) {\n                if (this.editAllLayers) {\n                    stepGraphic.isAllowedInteraction = true\n                } else {\n                    stepGraphic.isAllowedInteraction = this.stepLayerDictionary[stepGraphic.id].createdBy === this.props.user.id\n                }\n                this.addStepEventListeners(stepGraphic)\n            }\n        }\n\n        if (!this.isOn && this.props.isOn && !_.isNil(this.positionLine)) {\n            //console.log('playing timeline');\n            // adding 200ms delay to compensate for starting audio with delay to reduce audio glitches. Todo: sync this better with the transport\n            _.delay(() => {\n                this.positionLine.timeline().play()\n                this.isOn = true\n            }, 200)\n        } else if (this.isOn && !this.props.isOn && !_.isNil(this.positionLine)) {\n            //console.log('pausing timeline');\n            _.delay(() => {\n                this.positionLine.timeline().stop()\n                this.isOn = false\n            }, 200)\n        }\n\n        //if (this.round.layers.length < this.props.round.layers.length) {\n        // check for one or more layers added\n        this.cacheStepLayers()\n        for (let layer of this.props.round.layers) {\n            let oldLayer = _.find(this.round.layers, { id: layer.id })\n            if (_.isNil(oldLayer)) {\n                await AudioEngine.createTrack(layer)\n                redraw = true\n            }\n        }\n        // } else if (this.round.layers.length > this.props.round.layers.length) {\n        // check for one or more layers removed\n        // this.cacheStepLayers()\n        for (let layer of this.round.layers) {\n            let newLayer = _.find(this.props.round.layers, { id: layer.id })\n            if (_.isNil(newLayer)) {\n                AudioEngine.removeTrack(layer.id)\n                redraw = true\n            }\n        }\n        //    }\n\n        // check for number of steps per layer changed\n        let previousSteps = []\n        for (let i = 0; i < this.round.layers.length; i++) {\n            const layer = this.round.layers[i]\n            previousSteps.push(...layer.steps)\n            const newLayer = _.find(this.props.round.layers, { id: layer.id })\n            if (!_.isNil(newLayer)) {\n                if (newLayer.steps.length !== layer.steps.length) {\n                    // number of steps has changed\n                    redraw = true\n                    AudioEngine.recalculateParts(this.props.round)\n                }\n            }\n        }\n\n        // Check if an individual step has changed\n        let newSteps = []\n        for (let layer of this.props.round.layers) {\n            for (let newStep of layer.steps) {\n                newSteps.push(newStep)\n            }\n\n        }\n        for (let previousStep of previousSteps) {\n            let newStep = _.find(newSteps, { id: previousStep.id })\n            if (!_.isNil(newStep)) {\n                if (!_.isEqual(previousStep, newStep)) {\n                    //   console.log('found changed step', previousStep, newStep);\n                    this.updateStep(newStep, true)\n                    AudioEngine.recalculateParts(this.props.round)\n                }\n            }\n        }\n\n        // Check for layer type or instrument changes\n        for (let layer of this.round.layers) {\n            let newLayer = _.find(this.props.round.layers, { id: layer.id })\n            if (!_.isNil(newLayer) && !_.isEqual(layer.instrument, newLayer.instrument)) {\n                // instrument has changed\n                AudioEngine.tracksById[newLayer.id].setInstrument(newLayer.instrument)\n            }\n            if (!_.isNil(newLayer) && !_.isEqual(layer.type, newLayer.type)) {\n                // type has changed\n                console.log('layer type has changed');\n                AudioEngine.tracksById[newLayer.id].setType(newLayer.type, newLayer.automationFxId)\n            }\n            if (!_.isNil(newLayer) && !_.isEqual(layer.automationFxId, newLayer.automationFxId)) {\n                // automation has changed\n                console.log('layer automation fx id has changed');\n                AudioEngine.tracksById[newLayer.id].setAutomatedFx(newLayer.automationFxId)\n            }\n        }\n        // Check for gain changes\n        for (let layer of this.round.layers) {\n            let newLayer = _.find(this.props.round.layers, { id: layer.id })\n            if (!_.isNil(newLayer) && !_.isEqual(layer.gain, newLayer.gain)) {\n                // gain has changed\n                AudioEngine.tracksById[newLayer.id].setVolume(newLayer.gain)\n            }\n        }\n\n        // Check for mute changes\n        for (let layer of this.round.layers) {\n            let newLayer = _.find(this.props.round.layers, { id: layer.id })\n            if (!_.isNil(newLayer) && !_.isEqual(layer.isMuted, newLayer.isMuted)) {\n                // mute has changed\n                AudioEngine.tracksById[newLayer.id].setMute(newLayer.isMuted)\n            }\n        }\n\n\n\n\n        if (redraw) {\n            this.clear()\n            this.round = _.cloneDeep(this.props.round)\n            _this.draw(false)\n        } else {\n            this.round = _.cloneDeep(this.props.round)\n        }\n    }\n\n    getStep (id) {\n        let steps = []\n        for (let layer of this.round.layers) {\n            steps.push(...layer.steps)\n        }\n        return _.find(steps, { id })\n    }\n\n    draw (shouldAnimate) {\n        //console.log('draw()');\n        this.clear()\n        const _this = this\n\n        this.orderLayers()\n        this.cacheStepLayers()\n\n\n\n        // position line\n        /*  this.isOn = this.props.isOn\n          const positionLineLength = (HTML_UI_Params.addNewLayerButtonDiameter / 2) + (HTML_UI_Params.initialLayerPadding / 2) + ((HTML_UI_Params.stepDiameter + HTML_UI_Params.layerPadding) * this.round.layers.length)\n  \n          const positionLineWidth = 16\n          const positionLineTime = (60 / this.round.bpm) * 4000\n          this.positionLine = this.container.rect(positionLineWidth, positionLineLength).fill('#666666')\n          this.positionLine.move((this.containerWidth / 2) - (positionLineWidth / 2), (this.containerHeight / 2) - positionLineLength)\n          this.positionLineAnimation = this.positionLine.animate({ duration: positionLineTime }).ease('-').transform({ rotate: 360, relative: true, origin: 'bottom center' }).loop()\n          if (!this.isOn) {\n              this.positionLine.timeline().pause()\n          } else {\n              this.positionLine.timeline().seek(AudioEngine.getPositionMilliseconds())\n          }*/\n        // draw layers\n        this.stepGrahpics = []\n        this.layerGraphics = []\n        let i = 0\n        for (const layer of this.round.layers) {\n            // add order parameter so we can calculate offsets (todo: add this when we create a layer?)\n            this.addLayer(layer, i++, shouldAnimate)\n        }\n        // Create activity line\n        this.drawAvatars()\n        this.activityIndicator = this.container.circle(HTML_UI_Params.activityIndicatorDiameter).fill({ color: '#fff', opacity: 0 })\n\n        // add layer button\n        this.addLayerButton = this.container.circle(HTML_UI_Params.addNewLayerButtonDiameter).attr({ fill: '#1B1B1B' }).stroke({ width: 1, color: this.userColors[this.props.user.id], dasharray: '5,5' })\n        this.addLayerButton.x((this.containerWidth / 2) - (HTML_UI_Params.addNewLayerButtonDiameter / 2))\n        this.addLayerButton.y((this.containerHeight / 2) - (HTML_UI_Params.addNewLayerButtonDiameter / 2))\n        this.addLayerButton.click(() => {\n            _this.onAddLayerClick()\n        })\n        this.addLayerButton.addClass(this.props.classes.button)\n        //this.addLayerButton.svg('<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"white\" width=\"18px\" height=\"18px\"><path d=\"M0 0h24v24H0z\" fill=\"white\"/><path fill=\"white\" d=\"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\"/></svg>')\n        this.addLayerButtonIcon = this.container.nested()\n        this.addLayerButtonIcon.svg('<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"' + this.userColors[this.props.user.id] + '\" width=\"48px\" height=\"48px\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\"/></svg>')\n        this.addLayerButtonIcon.x((this.containerWidth / 2) - 24)\n        this.addLayerButtonIcon.y((this.containerHeight / 2) - 25)\n        this.addLayerButtonIcon.addClass(this.props.classes.buttonIcon)\n\n        this.stepModal = this.container.nested()\n        this.stepModalBackground = this.stepModal.rect(122, 52).fill({ color: '#000', opacity: 0.7 }).radius(4)\n        this.stepModalText = this.stepModal.text('')\n        this.stepModalText.fill('#fff')\n        this.stepModalText.font({\n            size: 16,\n            weight: 500\n        })\n        this.stepModalText.x(8)\n        this.stepModal.hide()\n\n        if (!_.isNil(this.highlightNewLayer)) {\n            // this.onLayerClicked(this.highlightNewLayer)\n            this.props.dispatch({ type: SET_SELECTED_LAYER_ID, payload: { layerId: this.highlightNewLayer } })\n            this.props.dispatch({ type: SET_IS_SHOWING_LAYER_SETTINGS, payload: { value: true } })\n            this.highlightNewLayer = null;\n        }\n\n        this.scheduleToneEvents()\n    }\n\n    scheduleToneEvents () {\n        this.disposeToneEvents()\n        const _this = this\n        this.toneParts = []\n        for (const layer of this.round.layers) {\n            const notes = this.convertStepsToNotes(layer.steps, this.userColors[layer.createdBy])\n            for (let note of notes) {\n                note.time += 'i';\n            }\n            let part = new Tone.Part(function (time, note) {\n                Tone.Draw.schedule(function () {\n                    const stepGraphic = _.find(_this.stepGraphics, { id: note.id })\n                    if (!_.isNil(stepGraphic)) {\n                        stepGraphic.stroke({ color: '#FFFFFF' })\n                        stepGraphic.animate().stroke({ color: note.color })\n                    }\n\n                }, time)\n            }, notes)\n            part.start(0)\n            _this.toneParts.push(part)\n        }\n    }\n\n    disposeToneEvents () {\n        if (!_.isNil(this.toneParts)) {\n            for (let part of this.toneParts) {\n                if (!_.isNil(part) && !_.isNil(part._events)) {\n                    part.dispose()\n                }\n            }\n        }\n    }\n\n    convertStepsToNotes (steps, userColor) {\n        const PPQ = Tone.Transport.PPQ\n        const totalTicks = PPQ * 4\n        const ticksPerStep = Math.round(totalTicks / steps.length)\n        let notes = []\n        for (let i = 0; i < steps.length; i++) {\n            let step = steps[i]\n            const note = {\n                time: i * ticksPerStep,\n                id: step.id,\n                isOn: step.isOn,\n                color: userColor\n            }\n            notes.push(note)\n        }\n        return notes\n    }\n\n    clear () {\n        this.removeAllStepEventListeners()\n        this.removeAllLayerEventListeners()\n        if (!_.isNil(this.layerGrahpics)) {\n            for (let layerGrahpic of this.layerGrahpics) {\n                layerGrahpic.clear()\n            }\n        }\n\n        if (!_.isNil(this.stepGrahpics)) {\n            for (let stepGraphic of this.stepGraphics) {\n                stepGraphic.clear()\n            }\n        }\n        this.stepGraphics = []\n        if (!_.isNil(this.container)) {\n            this.container.clear()\n        }\n        if (!_.isNil(this.addLayerButton)) {\n            this.addLayerButton.click(null)\n        }\n    }\n\n    reclaculateIndicatorAnimation () {\n        /* if (!_.isNil(this.positionLineAnimation)) {\n             this.positionLineAnimation.unschedule()\n         }\n         const positionLineTime = (60 / this.round.bpm) * 4000\n         this.positionLineAnimation = this.positionLine.animate({ duration: positionLineTime }).ease('-').transform({ rotate: 360, relative: true, origin: 'bottom center' }).loop()\n         if (!this.isOn) {\n             this.positionLine.timeline().pause()\n         } else {\n             this.positionLine.timeline().seek(AudioEngine.getPositionMilliseconds())\n         }*/\n    }\n\n    addLayer (layer, order, shouldAnimate = true) {\n        // console.log('addLayer', layer);\n        let animateTime = shouldAnimate ? 600 : 0\n\n        const layerDiameter = HTML_UI_Params.addNewLayerButtonDiameter + HTML_UI_Params.initialLayerPadding + ((HTML_UI_Params.stepDiameter + HTML_UI_Params.layerPadding + HTML_UI_Params.layerPadding + HTML_UI_Params.stepDiameter) * (order + 1))\n        const xOffset = (this.containerWidth / 2) - (layerDiameter / 2)\n        const yOffset = (this.containerHeight / 2) - (layerDiameter / 2)\n        const layerGraphic = this.container.circle(layerDiameter, layerDiameter).attr({ fill: 'none' }).stroke({ color: this.userColors[layer.createdBy], width: HTML_UI_Params.layerStrokeMax + 'px', opacity: 0 })\n        layerGraphic.x(xOffset)\n        layerGraphic.y(yOffset)\n        layerGraphic.id = layer.id\n        layerGraphic.isAllowedInteraction = layer.createdBy === this.props.user.id\n        if (layer.id === this.selectedLayerId) {\n            layerGraphic.animate().stroke({ opacity: HTML_UI_Params.layerStrokeOpacity * 2 })\n        } else {\n            layerGraphic.animate(animateTime).stroke({ opacity: HTML_UI_Params.layerStrokeOpacity })\n        }\n        layerGraphic.addClass(this.props.classes.button)\n        this.addLayerEventListeners(layerGraphic)\n        this.layerGraphics.push(layerGraphic)\n\n        // draw steps\n        const stepSize = (2 * Math.PI) / layer.steps.length;\n        const radius = layerDiameter / 2;\n        let angle = Math.PI / -2; // start at -90 degrees so first step is at top\n        for (let step of layer.steps) {\n            const x = Math.round(layerDiameter / 2 + radius * Math.cos(angle) - HTML_UI_Params.stepDiameter / 2) + xOffset;\n            const y = Math.round(layerDiameter / 2 + radius * Math.sin(angle) - HTML_UI_Params.stepDiameter / 2) + yOffset;\n            const stepGraphic = this.container.circle(HTML_UI_Params.stepDiameter)\n            stepGraphic.stroke({ color: this.userColors[layer.createdBy], width: HTML_UI_Params.stepStrokeWidth + 'px', opacity: 0 })\n            stepGraphic.animate(animateTime).stroke({ opacity: 1 })\n            stepGraphic.x(x)\n            stepGraphic.y(y)\n            angle += stepSize\n            stepGraphic.layerId = layer.id\n            stepGraphic.id = step.id\n            stepGraphic.isAllowedInteraction = layer.createdBy === this.props.user.id\n            stepGraphic.userColor = this.userColors[layer.createdBy]\n            stepGraphic.addClass(this.props.classes.button)\n            this.stepGraphics.push(stepGraphic)\n            this.updateStep(step)\n            this.addStepEventListeners(stepGraphic)\n        }\n\n    }\n\n    updateStep (step, showActivityIndicator = false) {\n        //console.log('updateStep', step);\n        if (!_.isEmpty(this.stepGraphics) && !_.isNil(step)) {\n            const layer = this.stepLayerDictionary[step.id]\n            const stepGraphic = _.find(this.stepGraphics, { id: step.id })\n            //console.log('updating step', stepGraphic, step.isOn, this.props.user.color);\n            const _this = this\n            if (showActivityIndicator) {\n                // add delay so that graphic updates after activity indicator hits it\n                _.delay(() => {\n                    if (step.isOn) {\n                        stepGraphic.animate(HTML_UI_Params.stepAnimationUpdateTime).attr({ fill: _this.userColors[layer.createdBy], 'fill-opacity': step.probability })\n                        stepGraphic.animate(HTML_UI_Params.stepAnimationUpdateTime).transform({\n                            scale: step.velocity\n                        })\n                    } else {\n                        stepGraphic.animate(HTML_UI_Params.stepAnimationUpdateTime).attr({ fill: '#101114' })\n                    }\n                }, HTML_UI_Params.activityAnimationTime)\n                this.animateActivityIndicator(layer.createdBy, stepGraphic.x() + (HTML_UI_Params.stepDiameter / 2), stepGraphic.y() + (HTML_UI_Params.stepDiameter / 2))\n            } else {\n                if (step.isOn) {\n                    stepGraphic.attr({ fill: _this.userColors[layer.createdBy], 'fill-opacity': step.probability })\n                    stepGraphic.transform({\n                        scale: step.velocity\n                    })\n                } else {\n                    stepGraphic.attr({ fill: '#101114' })\n                }\n            }\n        }\n    }\n\n    highlightLayer (layerGraphic, unhighlightExceptLayerId) {\n        this.unhighlightAllLayers(unhighlightExceptLayerId)\n        // layerGraphic.animate().stroke({ opacity: HTML_UI_Params.layerStrokeOpacity * 2 })\n        layerGraphic.stroke({ opacity: HTML_UI_Params.layerStrokeOpacity * 2 })\n    }\n\n    unhighlightAllLayers (exceptLayerId) {\n        this.layerGraphics.map((layerGraphic) => {\n            if (layerGraphic.id !== exceptLayerId) {\n                //layerGraphic.animate().stroke({ opacity: HTML_UI_Params.layerStrokeOpacity })\n                layerGraphic.stroke({ opacity: HTML_UI_Params.layerStrokeOpacity })\n            }\n        })\n    }\n\n    cacheStepLayers () {\n        this.stepLayerDictionary = {}\n        for (let layer of this.props.round.layers) {\n            for (let step of layer.steps) {\n                this.stepLayerDictionary[step.id] = layer\n            }\n        }\n    }\n\n    drawAvatars () {\n        if (!_.isNil(this.props.collaboration)) {\n            this.avatarGraphics = []\n            const numberOfContributors = Object.entries(this.props.collaboration.contributors).length\n            const totalAvatarHeight = (HTML_UI_Params.avatarDiameter * numberOfContributors) + (HTML_UI_Params.avatarPadding * (numberOfContributors - 1))\n            const offsetY = (this.containerHeight / 2) - (totalAvatarHeight / 2)\n            let x = (this.containerWidth / 2) + (HTML_UI_Params.addNewLayerButtonDiameter / 2) + (HTML_UI_Params.initialLayerPadding / 2) + ((HTML_UI_Params.stepDiameter + HTML_UI_Params.layerPadding) * (this.round.layers.length)) + HTML_UI_Params.avatarRoundPadding\n            let y = 0\n            for (let [id, contributor] of Object.entries(this.props.collaboration.contributors)) {\n                let avatarGraphic = this.container.circle(HTML_UI_Params.avatarDiameter).attr({ fill: contributor.color })\n                avatarGraphic.x(x)\n                avatarGraphic.y(y + offsetY)\n                avatarGraphic.id = id\n                this.avatarGraphics.push(avatarGraphic)\n                y += HTML_UI_Params.avatarDiameter + HTML_UI_Params.avatarPadding\n            }\n        }\n    }\n\n    updateAvatarPositions (numberOfLayers) {\n        if (!_.isEmpty(this.avatarGraphics)) {\n            let x = (this.containerWidth / 2) + (HTML_UI_Params.addNewLayerButtonDiameter / 2) + (HTML_UI_Params.initialLayerPadding / 2) + ((HTML_UI_Params.stepDiameter + HTML_UI_Params.layerPadding) * numberOfLayers) + HTML_UI_Params.avatarRoundPadding\n            for (let avatarGraphic of this.avatarGraphics) {\n                avatarGraphic.x(x)\n            }\n        }\n    }\n\n    animateActivityIndicator (userId, toX, toY) {\n        const avatarGraphic = _.find(this.avatarGraphics, { id: userId })\n        if (!_.isNil(this.activityIndicator) && !_.isNil(avatarGraphic)) {\n            this.activityIndicator.fill({ color: this.userColors[userId], opacity: 1 })\n            const fromX = avatarGraphic.x() + (HTML_UI_Params.avatarDiameter / 2)\n            const fromY = avatarGraphic.y() + (HTML_UI_Params.avatarDiameter / 2)\n            toX -= HTML_UI_Params.activityIndicatorDiameter / 2\n            toY -= HTML_UI_Params.activityIndicatorDiameter / 2\n            this.activityIndicator.move(fromX, fromY)\n            const animation = this.activityIndicator.animate(HTML_UI_Params.activityAnimationTime).move(toX, toY)//.animate(HTML_UI_Params.activityAnimationTime * 1.3).fill({ opacity: 0 })\n            animation.after(() => {\n                this.activityIndicator.animate().fill({ opacity: 0 })\n            })\n        }\n    }\n\n    addLayerEventListeners (layerGraphic) {\n        const _this = this\n        if (layerGraphic.isAllowedInteraction) {\n            layerGraphic.click(function (e) {\n                e.stopPropagation()\n                //_this.onLayerClicked(layerGraphic.id)\n            })\n            layerGraphic.on('mousedown', function (e) {\n                e.stopPropagation()\n                _this.onLayerClicked(layerGraphic.id)\n            })\n            layerGraphic.on('mouseover', function (e) {\n                //console.log('layer mouseover');\n                e.stopPropagation()\n                _this.onLayerOver(layerGraphic)\n            })\n            layerGraphic.on('mouseout', function (e) {\n                //console.log('layer mouseout');\n                e.stopPropagation()\n                _this.onLayerOut(layerGraphic)\n            })\n            layerGraphic.on('touchstart', (e) => {\n                _this.onLayerTouchStart(layerGraphic, e)\n            })\n            layerGraphic.on('touchend', (e) => {\n                _this.onLayerTouchEnd(layerGraphic, e)\n            })\n        }\n    }\n    onLayerTouchStart (layerGraphic, e) {\n        console.log('onLayerTouchStart');\n        e.preventDefault()\n        const _this = this\n        this.layerTouchTimer = setTimeout(() => {\n            _this.onLayerClicked(layerGraphic.id)\n        }, 500)\n    }\n    onLayerTouchEnd (layerGraphic) {\n        console.log('onLayerTouchEnd');\n        if (this.layerTouchTimer) {\n            clearTimeout(this.layerTouchTimer)\n        }\n    }\n    onLayerClicked (layerId) {\n        this.selectedLayerId = layerId\n        this.props.dispatch({ type: SET_SELECTED_LAYER_ID, payload: { layerId } })\n        this.props.dispatch({ type: SET_IS_SHOWING_LAYER_SETTINGS, payload: { value: true } })\n        this.highlightLayer(_.find(this.layerGraphics, { id: layerId }))\n    }\n    onLayerOver (layerGraphic) {\n        this.highlightLayer(layerGraphic, this.selectedLayerId)\n    }\n    onLayerOut (layerGraphic) {\n        this.unhighlightAllLayers(this.selectedLayerId)\n    }\n\n    orderLayers () {\n        // order layers\n        this.round.layers = _.sortBy(this.round.layers, 'createdAt')\n\n        let myLayers = _.filter(this.round.layers, { createdBy: this.props.user.id })\n        myLayers = _.sortBy(myLayers, 'createdAt')\n        myLayers.reverse()\n        let collaboratorLayers = _.filter(this.round.layers, (layer) => {\n            return layer.createdBy !== this.props.user.id\n        })\n        collaboratorLayers = _.sortBy(collaboratorLayers, ['createdBy', 'createdAt'])\n        console.log('myLayers', myLayers, 'collaboratorLayers', collaboratorLayers);\n        this.round.layers = [...myLayers, ...collaboratorLayers]\n    }\n\n    orderSteps () {\n        for (const layer of this.round.layers) {\n            layer.steps = _.orderBy(layer.steps, 'order')\n        }\n    }\n\n    addStepEventListeners (stepGraphic) {\n        const _this = this\n        if (stepGraphic.isAllowedInteraction) {\n            stepGraphic.click(function (e) {\n                e.stopPropagation()\n                _this.onStepClick(stepGraphic)\n            })\n            stepGraphic.on('mousedown', (e) => {\n                e.stopPropagation()\n                _this.onStepDragStart(stepGraphic, e.pageX, e.pageY)\n                _this.container.on('mousemove', (e) => {\n                    _this.onStepDragMove(stepGraphic, e.pageX, e.pageY)\n                })\n                _this.container.on('mouseup', (e) => {\n                    e.stopPropagation()\n                    _this.container.off('mousemove')\n                    _this.container.off('mouseup')\n                    _this.onStepDragEnd(stepGraphic)\n                })\n            })\n\n            stepGraphic.on('mouseover', (e) => {\n                _this.highlightStep(stepGraphic)\n            })\n            stepGraphic.on('mouseout', (e) => {\n                _this.unhighlightStep(stepGraphic)\n            })\n            stepGraphic.on('touchstart', (e) => {\n                _this.onStepDragStart(stepGraphic, e.touches[0].pageX, e.touches[0].pageY)\n            })\n\n            stepGraphic.on('touchend', (e) => {\n                _this.onStepDragEnd(stepGraphic)\n            })\n            stepGraphic.on('touchmove', (e) => {\n                _this.onStepDragMove(stepGraphic, e.touches[0].pageX, e.touches[0].pageY)\n            })\n        }\n    }\n\n    onStepDragStart (stepGraphic, x, y) {\n        // console.log('onStepDragStart', x, y);\n        this.stepIsPanning = true\n        stepGraphic.startX = x\n        stepGraphic.startY = y\n        const step = this.getStep(stepGraphic.id)\n        stepGraphic.isOn = step.isOn\n        stepGraphic.probabilityPanStart = stepGraphic.probability = step.probability;\n        stepGraphic.velocityPanStart = stepGraphic.velocity = step.velocity;\n        if (stepGraphic.isOn) {\n            this.stepModal.show()\n            this.updateStepModal(stepGraphic)\n        }\n    }\n    onStepDragMove (stepGraphic, x, y) {\n        const deltaX = x - stepGraphic.startX\n        const deltaY = y - stepGraphic.startY\n        //console.log('onStepDragMove', this.isZooming, stepGraphic.isOn, deltaX, deltaY, stepGraphic.isPanningX);\n        if (!this.isZooming && stepGraphic.isOn) {\n            if (stepGraphic.isPanningX) {\n                let delta = deltaX\n                if (delta < -100) {\n                    delta = -100\n                }\n                delta = delta / 100\n                delta += 1\n                stepGraphic.probability = delta * stepGraphic.probabilityPanStart\n                if (stepGraphic.probability < 0.1) {\n                    stepGraphic.probability = 0.1\n                } else if (stepGraphic.probability > 1) {\n                    stepGraphic.probability = 1\n                }\n\n                stepGraphic.fill({ opacity: stepGraphic.probability })\n                this.updateStepModal(stepGraphic)\n            } else if (stepGraphic.isPanningY) {\n                let delta = deltaY\n                if (delta < -100) {\n                    delta = -100\n                }\n                delta = delta / -100\n                delta += 1\n                stepGraphic.velocity = delta * stepGraphic.velocityPanStart;\n                if (stepGraphic.velocity < 0.5) {\n                    stepGraphic.velocity = 0.5\n                } else if (stepGraphic.velocity > 1) {\n                    stepGraphic.velocity = 1\n                }\n                stepGraphic.transform({\n                    scale: stepGraphic.velocity\n                })\n                this.updateStepModal(stepGraphic)\n\n            } else {\n                // console.log('not panning yet', deltaX, deltaY);\n                if (Math.abs(deltaY) > 20) {\n                    stepGraphic.isPanningY = true\n                    this.isPanning = true\n                } else if (Math.abs(deltaX) > 20) {\n                    stepGraphic.isPanningX = true\n                    this.isPanning = true\n                }\n            }\n        }\n    }\n    onStepDragEnd (stepGraphic) {\n        if (stepGraphic.isPanningX && stepGraphic.isOn) {\n            const step = this.getStep(stepGraphic.id)\n            step.probability = stepGraphic.probability\n            this.props.dispatch({ type: SET_STEP_PROBABILITY, payload: { probability: stepGraphic.probability, layerId: stepGraphic.layerId, stepId: stepGraphic.id, user: this.props.user.id } })\n            this.saveLayer(stepGraphic.layerId)\n            //this.context.updateStep(this.round.id, stepGraphic.layerId, stepGraphic.id, step)\n        } else if (stepGraphic.isPanningY && stepGraphic.isOn) {\n            const step = this.getStep(stepGraphic.id)\n            step.velocity = stepGraphic.velocity\n            this.props.dispatch({ type: SET_STEP_VELOCITY, payload: { velocity: stepGraphic.velocity, layerId: stepGraphic.layerId, stepId: stepGraphic.id, user: this.props.user.id } })\n            this.saveLayer(stepGraphic.layerId)\n            //this.context.updateStep(this.round.id, stepGraphic.layerId, stepGraphic.id, step)\n        }\n        AudioEngine.recalculateParts(this.props.round)\n        stepGraphic.isPanningX = false;\n        stepGraphic.isPanningY = false;\n        this.stepIsPanning = false\n        this.stepModal.hide()\n        setTimeout(() => {\n            this.isPanning = false\n        }, 100)\n    }\n\n    highlightStep (stepGraphic) {\n        const layer = _.find(this.props.round.layers, { id: stepGraphic.layerId })\n        if (!_.isNil(layer)) {\n            stepGraphic.animate(HTML_UI_Params.stepAnimationUpdateTime).attr({ fill: this.userColors[layer.createdBy], 'fill-opacity': 1 })\n        }\n    }\n    unhighlightStep (stepGraphic) {\n        const step = this.getStep(stepGraphic.id)\n        if (!step.isOn) {\n            stepGraphic.animate(HTML_UI_Params.stepAnimationUpdateTime).attr({ fill: '#101114', 'fill-opacity': 1 })\n        }\n    }\n\n    saveLayer (id) {\n        this.context.updateLayer(this.round.id, id, _.find(this.round.layers, { id }))\n    }\n\n    removeAllStepEventListeners () {\n        for (let stepGraphic of this.stepGraphics) {\n            stepGraphic.click(null)\n            if (!_.isNil(stepGraphic.hammertime)) {\n                stepGraphic.hammertime.off('pan')\n                stepGraphic.hammertime.off('panstart')\n                stepGraphic.hammertime.off('panend')\n            }\n        }\n    }\n\n    removeAllLayerEventListeners () {\n        for (let layerGraphic of this.layerGraphics) {\n            layerGraphic.click(null)\n        }\n    }\n\n    updateStepModal (stepGraphic) {\n        this.stepModalText.text('Velocity: ' + _.round(stepGraphic.velocity, 1) + '\\nProbability: ' + _.round(stepGraphic.probability, 1))\n        this.stepModal.x(stepGraphic.x())\n        this.stepModal.y(stepGraphic.y() - 100)\n    }\n\n    onStepClick (stepGraphic) {\n        let step = this.getStep(stepGraphic.id)\n        if (!this.isPanning) {\n            // update internal round so that it doesn't trigger another update when we receive a change after the dispatch\n            step.isOn = !step.isOn\n            this.updateStep(step, false)\n            AudioEngine.recalculateParts(this.round)\n            this.props.dispatch({ type: TOGGLE_STEP, payload: { layerId: stepGraphic.layerId, stepId: stepGraphic.id, isOn: step.isOn, user: null } })\n            // console.log('this.context', this.context);\n            this.saveLayer(stepGraphic.layerId)\n            //this.context.updateStep(this.round.id, stepGraphic.layerId, stepGraphic.id, step)\n        }\n    }\n\n    onAddLayerClick () {\n        const newLayer = getDefaultLayerData(this.props.user.id);\n        newLayer.name = 'Layer ' + (this.props.round.layers.length + 1)\n        this.props.dispatch({ type: ADD_LAYER, payload: { layer: newLayer, user: this.props.user.id } })\n        this.context.createLayer(this.round.id, newLayer)\n        this.highlightNewLayer = newLayer.id\n        this.selectedLayerId = newLayer.id\n        /* const newLayer = _.cloneDeep(this.props.round.layers[this.props.round.layers.length - 1])\n         newLayer.id = Math.round(Math.random() * 99999)\n         newLayer.order++;\n         for (const step of newLayer.steps) {\n             step.id = Math.round(Math.random() * 99999)\n             this.stepLayerDictionary[step.id] = newLayer\n         }\n         this.addLayer(newLayer, false)\n         AudioEngine.createTrack(newLayer)*/\n        // this.draw()\n    }\n\n    addEventListeners () {\n        //const element = document.getElementById('round')\n        //const hammertime = new Hammer(element, {});\n        //hammertime.get('pinch').set({ enable: true });\n    }\n    addBackgroundEventListeners () {\n        const element = document.getElementById('round')\n        element.addEventListener('click', this.onOutsideClick)\n    }\n    removeBackgroundEventListeners () {\n        const element = document.getElementById('round')\n        element.removeEventListener('click', this.onOutsideClick)\n    }\n    onOutsideClick () {\n        this.unhighlightAllLayers()\n        this.props.dispatch({ type: SET_IS_SHOWING_LAYER_SETTINGS, payload: { value: false } })\n        this.selectedLayerId = null\n    }\n    getUserColors () {\n        let userColors = {};\n        for (const user of this.props.users) {\n            userColors[user.id] = user.color\n        }\n        return userColors\n    }\n\n    onWindowResize (e) {\n        if (!_.isNil(this.container)) {\n            this.containerWidth = Math.max(document.documentElement.clientWidth || 0, window.innerWidth || 0)\n            this.containerHeight = Math.max(document.documentElement.clientHeight || 0, window.innerHeight || 0)\n            const roundElement = document.getElementById('round')\n            roundElement.style.width = this.containerWidth + 'px'\n            roundElement.style.height = this.containerHeight + 'px'\n            let currentViewBox = this.container.viewbox()\n            this.container.size(this.containerWidth, this.containerHeight)\n            this.container.viewbox(\n                0,\n                currentViewBox.y,\n                this.containerWidth,\n                this.containerHeight\n            )\n            this.draw()\n        }\n    }\n\n    onKeypress (e) {\n        if (e.key === KEY_MAPPINGS.playToggle && !this.props.disableKeyListener) {\n            if (this.props.round.isPlaying) {\n                AudioEngine.stop()\n                this.context.updateRound(this.round.id, { isPlaying: false })\n                this.props.dispatch({ type: SET_IS_PLAYING, payload: { value: false } })\n            } else {\n                AudioEngine.play()\n                this.context.updateRound(this.round.id, { isPlaying: true })\n                this.props.dispatch({ type: SET_IS_PLAYING, payload: { value: true } })\n            }\n        }\n    }\n\n    render () {\n        //console.log('HTML UI render()');\n        return (\n            <div className=\"round\" id=\"round\" ></div>\n        )\n    }\n}\nPlayUI.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = state => {\n    //console.log('mapStateToProps', state);\n    return {\n        round: state.round,\n        user: state.user,\n        users: state.users,\n        disableKeyListener: state.display.disableKeyListener\n    };\n};\n\n\nexport default connect(\n    mapStateToProps\n)(withStyles(styles)(PlayUI));\n","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/components/play/EffectsSidebar.js",["399","400"],"import React, { Component } from 'react'\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/styles';\nimport Box from '@material-ui/core/Box';\nimport { connect } from \"react-redux\";\nimport AudioEngine from \"../../audio-engine/AudioEngine\"\nimport { FirebaseContext } from '../../firebase';\nimport {\n    setUserBusFx,\n    setUserBusFxOverride\n} from \"../../redux/actions\";\nimport { sortableContainer, sortableElement, sortableHandle } from 'react-sortable-hoc';\nimport arrayMove from 'array-move'\nimport { DragIndicator } from '@material-ui/icons';\nimport EffectThumbControl from './EffectThumbControl';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport _ from 'lodash'\n\nconst styles = theme => ({\n    root: {\n        width: '120px',\n        height: 'calc(100% - 64px)',\n        position: 'absolute',\n        right: '0',\n        top: '64px',\n        borderTop: 'solid 1px rgba(255,255,255,0.1)',\n        backgroundColor: 'rgba(47,47,47,0.9)',\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'flex-end',\n        paddingBottom: '0.5rem',\n        transition: 'right 0.4s',\n    },\n    isMinimized: {\n        right: '-120px'\n    },\n    minimizeButton: {\n        backgroundColor: 'rgba(47,47,47,0.9)',\n        width: '32px',\n        height: '32px',\n        position: 'absolute',\n        left: '-40px',\n        bottom: '16px',\n        borderRadius: '16px',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        transition: 'transform 0.4s',\n        cursor: 'pointer'\n    },\n    minimizeButtonIsMinimized: {\n        transform: 'rotateY(180deg)'\n    },\n    thumbControl: {\n        marginBottom: '0.5rem'\n    },\n    effectsSidebarList: {\n        margin: '0',\n        padding: '0',\n        width: '100%'\n    },\n    effectsSidebarListItem: {\n        listStyleType: 'none',\n        padding: '1rem',\n        paddingLeft: '0',\n        backgroundColor: '',\n        color: 'white',\n        borderTop: 'solid 1px rgba(255, 255, 255, 0.1)',\n        display: 'flex',\n        alignItems: 'center',\n    },\n    effectsSidebarListItemDragHandle: {\n        paddingLeft: '1rem',\n        paddingRight: '1rem',\n        display: 'flex',\n        cursor: 'move',\n        color: '#ededed'\n    }\n})\n\nconst DragHandle = sortableHandle(({ classes }) => <span className={classes.effectsSidebarListItemDragHandle}><DragIndicator /></span>);\nconst SortableItem = sortableElement(({ fx, onSwitchOn, onSwitchOff, classes }) => (\n    <li className={classes.effectsSidebarListItem}>\n        <DragHandle classes={classes} />\n        <EffectThumbControl label={toTitleCase(fx.label)} fxId={fx.id} userId={fx.userId} switchOn={onSwitchOn} switchOff={onSwitchOff} name={fx.name} />\n    </li>\n));\nconst SortableContainer = sortableContainer(({ children, classes }) => {\n    return <ul className={classes.effectsSidebarList}>{children}</ul>;\n});\n\nconst toTitleCase = (str) => {\n    return str.replace(\n        /\\w\\S*/g,\n        function (txt) {\n            return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n        }\n    );\n}\n\n\nclass EffectsSidebar extends Component {\n    static contextType = FirebaseContext;\n    constructor (props) {\n        super(props)\n        this.state = {\n            menuAnchorElement: null,\n            isMinimized: false\n        }\n        this.onSwitchOn = this.onSwitchOn.bind(this)\n        this.onSwitchOff = this.onSwitchOff.bind(this)\n        this.onMinimizeClick = this.onMinimizeClick.bind(this)\n    }\n\n    onPlayClick () {\n        this.props.togglePlay()\n    }\n    onSortEnd = ({ oldIndex, newIndex }) => {\n        let userBus = _.cloneDeep(this.props.round.userBuses[this.props.user.id])\n        userBus.fx = arrayMove(userBus.fx, oldIndex, newIndex)\n        for (let i = 0; i < userBus.fx.length; i++) {\n            userBus.fx[i].order = i\n        }\n        this.props.setUserBusFx(this.props.user.id, userBus.fx)\n        //this.props.dispatch({ type: SET_USER_BUS_FX, payload: { userId: this.props.user.id, data: userBus.fx } })\n        AudioEngine.busesByUser[this.props.user.id].setFxOrder(userBus.fx)\n        this.context.updateUserBus(this.props.round.id, this.props.user.id, userBus)\n\n        /*this.setState(({ items }) => ({\n            items: arrayMove(items, oldIndex, newIndex),\n        }));*/\n    };\n    onSwitchOn (fxId) {\n        AudioEngine.busesByUser[this.props.user.id].fx[fxId].override = true\n        this.props.setUserBusFxOverride(this.props.user.id, fxId, true)\n        //this.props.dispatch({ type: SET_USER_BUS_FX_OVERRIDE, payload: { fxId, userId: this.props.user.id, value: true } })\n        let userBus = _.cloneDeep(this.props.round.userBuses[this.props.user.id])\n        let fx = _.find(userBus.fx, { id: fxId })\n        fx.isOverride = true\n        this.context.updateUserBus(this.props.round.id, this.props.user.id, userBus)\n    }\n    onSwitchOff (fxId) {\n        AudioEngine.busesByUser[this.props.user.id].fx[fxId].override = false\n        this.props.setUserBusFxOverride(this.props.user.id, fxId, false)\n        //this.props.dispatch({ type: SET_USER_BUS_FX_OVERRIDE, payload: { fxId, userId: this.props.user.id, value: false } })\n        let userBus = _.cloneDeep(this.props.round.userBuses[this.props.user.id])\n        let fx = _.find(userBus.fx, { id: fxId })\n        fx.isOverride = false\n        this.context.updateUserBus(this.props.round.id, this.props.user.id, userBus)\n    }\n    onMinimizeClick () {\n        this.setState({ isMinimized: !this.state.isMinimized })\n    }\n    render () {\n        const { classes } = this.props;\n        let items = []\n        if (!_.isNil(this.props.round) && !_.isNil(this.props.round.userBuses) && !_.isNil(this.props.round.userBuses[this.props.user.id])) {\n            for (const fx of this.props.round.userBuses[this.props.user.id].fx) {\n                let item = {\n                    id: fx.id,\n                    label: fx.name,\n                    userId: this.props.user.id,\n                    name: fx.name\n                }\n                items.push(item)\n            }\n        }\n        const isMinimizedClass = this.state.isMinimized ? classes.isMinimized : '';\n        const buttonIsMinimizedClass = this.state.isMinimized ? classes.minimizeButtonIsMinimized : '';\n\n        return (\n            <Box className={classes.root + ' ' + isMinimizedClass}>\n                {items.map((fx, index) => (\n                    <EffectThumbControl key={fx.id} className={classes.thumbControl} label={toTitleCase(fx.label)} fxId={fx.id} userId={fx.userId} switchOn={this.onSwitchOn} switchOff={this.onSwitchOff} name={fx.name} />\n                ))}\n                <Box className={classes.minimizeButton + ' ' + buttonIsMinimizedClass} onClick={this.onMinimizeClick}><ChevronRightIcon size=\"small\" /></Box>\n            </Box>\n        )\n\n        /*return (\n            <Box className={classes.root + ' ' + isMinimizedClass}>\n                <SortableContainer onSortEnd={this.onSortEnd} useDragHandle classes={classes} >\n                    {items.map((fx, index) => (\n                        <SortableItem classes={classes} key={`item-${fx.id}`} index={index} fx={fx} onSwitchOff={this.onSwitchOff} onSwitchOn={this.onSwitchOn} />\n                    ))}\n                </SortableContainer>\n                <Box className={classes.minimizeButton + ' ' + buttonIsMinimizedClass} onClick={this.onMinimizeClick}><ChevronRightIcon size=\"small\" /></Box>\n            </Box>\n        )*/\n    }\n}\nEffectsSidebar.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = state => {\n    //console.log('mapStateToProps', state);\n    return {\n        round: state.round,\n        user: state.user,\n        display: state.display\n    };\n};\n\nexport default connect(\n    mapStateToProps, {\n    setUserBusFx,\n    setUserBusFxOverride\n}\n)(withStyles(styles)(EffectsSidebar));","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/components/play/PatternsSidebar.js",[],"/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/components/dialogs/ShareDialog.js",["401","402","403","404","405"],"import React, { useState, useEffect, useContext, useRef } from 'react';\nimport { connect } from \"react-redux\";\nimport { FirebaseContext } from '../../firebase';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\nimport QRCode from 'qrcode'\nimport { useHistory } from \"react-router-dom\";\nimport { setIsShowingShareDialog, setRoundShortLink } from '../../redux/actions'\nimport _ from 'lodash'\n\nconst styles = makeStyles({\n    title: {\n        textAlign: 'center'\n    },\n    body: {\n        padding: '1rem',\n        borderTop: 'solid 1px rgba(255,255,255,0.1)'\n    },\n    linkContainer: {\n        display: 'flex'\n    },\n    QRCodeContainer: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        padding: '1rem'\n    },\n    textField: {\n        marginRight: '1rem'\n    },\n    copyButton: {\n        marginRight: '1rem',\n        minWidth: 100\n    }\n})\n\nconst ShareDialog = ({ round, isShowingShareDialog, setIsShowingShareDialog, setRoundShortLink }) => {\n    const firebase = useContext(FirebaseContext);\n    const [link, setLink] = useState({ link: '', long_url: '' });\n    const QRCanvas = useRef(null)\n    const textField = useRef(null)\n    const history = useHistory();\n    const [shortLink, setShortLink] = useState(round ? round.shortLink : '')\n\n    useEffect(() => {\n        if (isShowingShareDialog) {\n            draw()\n        }\n    }, [isShowingShareDialog])\n\n    const draw = async () => {\n        let fullUrl = window.location.origin + '/play/' + round.id;\n        //if (window.location.hostname === 'localhost') return null\n        if (window.location.hostname === 'localhost') {\n            fullUrl = 'http://192.168.1.123:3000/play/' + round.id;\n        }\n\n        if (_.isEmpty(round.shortLink)) {\n            const result = await generateShortLink(fullUrl)\n            setShortLink(result.link)\n            firebase.updateRound(round.id, { shortLink: result.link })\n            setRoundShortLink(result.link)\n        } else {\n            setShortLink(round.shortLink)\n        }\n\n        setTimeout(() => {\n            console.log('rendering QR code');\n            QRCode.toCanvas(document.getElementById('QRCanvas'), fullUrl, function (error) {\n                if (error) console.error(error)\n                console.log('success!');\n            })\n\n        }, 100)\n    }\n\n    const generateShortLink = async (fullUrl) => {\n        return new Promise(async (resolve, reject) => {\n            const bitlyToken = 'c48cf8ef04cb1e9bf0c8f320418b5b3bde599764';\n            const bitlyGroupGuid = 'Bk8q4epOSuG';\n            const requestOptions = {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${bitlyToken}`\n                },\n                body: JSON.stringify(\n                    {\n                        \"group_guid\": bitlyGroupGuid,\n                        \"domain\": \"bit.ly\",\n                        \"long_url\": fullUrl\n                    }\n                )\n            };\n\n            const shortenedLink = await fetch('https://api-ssl.bitly.com/v4/shorten', requestOptions)\n                .then(response => response.json())\n            console.log('shortenedLink', shortenedLink)\n            resolve(shortenedLink);\n        })\n    }\n\n    const handleClose = () => {\n        setIsShowingShareDialog(false)\n    }\n\n    const onGoClick = () => {\n        window.location = link.link\n    }\n    const onCopyClick = () => {\n        const textFieldComponent = textField.current;\n        const inputElement = textFieldComponent.querySelectorAll(\"input\")[0]\n        inputElement.focus();\n        inputElement.select();\n        document.execCommand('copy');\n        inputElement.blur();\n    }\n\n\n\n    const classes = styles();\n\n    return (\n        <>\n            <Dialog onClose={handleClose} aria-labelledby=\"simple-dialog-title\" open={isShowingShareDialog}>\n                <DialogTitle className={classes.title} id=\"simple-dialog-title\">Share project</DialogTitle>\n                <Box className={classes.body}>\n                    <p>Use the QR code or link to join the collaboration.</p>\n                    <Box className={classes.QRCodeContainer}>\n\n                        <canvas id=\"QRCanvas\" className={classes.QRCode}></canvas>\n                    </Box>\n                    <Box className={classes.linkContainer}>\n                        <TextField\n                            ref={textField}\n                            value={shortLink}\n                            variant=\"outlined\"\n                            fullWidth\n                            className={classes.textField}\n                        />\n                        <Button className={classes.copyButton} color=\"secondary\" variant=\"contained\" disableElevation onClick={onCopyClick}>Copy</Button>\n                    </Box></Box>\n\n            </Dialog>\n        </>\n    );\n}\nconst mapStateToProps = state => {\n    return {\n        round: state.round,\n        isShowingShareDialog: state.display.isShowingShareDialog\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    {\n        setIsShowingShareDialog,\n        setRoundShortLink\n    }\n)(ShareDialog);\n","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/audio-engine/AudioEngine.js",[],"/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/utils/defaultData.js",["406","407"],"import { Layer } from './constants';\nimport { uuid } from './index';\n//import Track from '../audio-engine/Track'\n\nexport const refrashAllIdsInArray = (array) => {\n    return array.map(item => ({ ...item, id: uuid() }))\n}\n\nexport const getDefaultStepData = () => {\n    return {\n        \"isOn\": false,\n        \"id\": uuid(),\n        \"probability\": 1,\n        \"velocity\": 1,\n        \"note\": \"C4\"\n    }\n};\n\nexport const getDefaultLayerData = (userId, instrument) => {\n    const layer = {\n        \"id\": uuid(),\n        \"createdBy\": userId || null,\n        \"name\": \"\",\n        \"type\": 'TRACK_TYPE_LAYER',\n        \"isActive\": true,\n        \"isMuted\": false,\n        \"isPreviewed\": false,\n        \"gain\": 0,\n        \"instrument\": {\n            \"noteLength\": \"64n\",\n            \"instrument\": \"Sampler\",\n            \"sampler\": \"BassDrum\",\n            \"sample\": \"bdLong04\",\n            ...instrument\n        },\n        \"steps\": Array(Layer.DefaultStepsAmount).fill(null).map(() => { return getDefaultStepData() }),\n        \"createdAt\": Date.now()\n    }\n    // increase each layer createdAt time by 1 ms so they're not equal\n    let i = 0\n    layer.steps.map((step) => {\n        step.order = i++\n    })\n    return layer;\n};\n\nexport const getDefaultRoundData = (userId) => {\n    const round = {\n        \"createdBy\": userId || null,\n        \"id\": uuid(),\n        \"dataVersion\": 1.5,\n        \"bpm\": 120,\n        swing: 0,\n        \"name\": \"Default Round\",\n        \"createdAt\": Date.now(),\n        \"currentUsers\": [],\n        \"layers\": [\n            getDefaultLayerData(userId, {\n                \"instrument\": \"Sampler\",\n                \"sampler\": \"HitHatOpen\",\n                \"sample\": \"oh03\",\n            }),\n            getDefaultLayerData(userId, {\n                \"instrument\": \"Sampler\",\n                \"sampler\": \"SnareDrum\",\n                \"sample\": \"sd03\",\n            }),\n            getDefaultLayerData(userId, {\n                \"instrument\": \"Sampler\",\n                \"sampler\": \"BassDrum\",\n                \"sample\": \"bdLong04\"\n            })\n        ],\n        userBuses: {},\n        userPatterns: {}\n    }\n    round.userBuses[userId] = getDefaultUserBus(userId)\n    round.userPatterns[userId] = getDefaultUserPatterns(userId)\n    // increase each layer createdAt time by 1 ms so they're not equal\n    let i = 0\n    round.layers.map((layer) => {\n        layer.name = \"Layer \" + (i + 1)\n        layer.createdAt += i++\n    })\n    return round\n}\n\nexport const getDefaultUserBus = (id) => {\n    return {\n        id,\n        fx: getDefaultUserBusFx()\n    }\n}\n\nexport const getDefaultUserBusFx = () => {\n    return [\n        {\n            \"id\": uuid(),\n            name: 'autowah',\n            order: 0,\n            isOn: true,\n            isOverride: false\n        },\n        {\n            \"id\": uuid(),\n            name: 'lowpass',\n            order: 1,\n            isOn: true,\n            isOverride: false\n        },\n        {\n            \"id\": uuid(),\n            name: 'highpass',\n            order: 2,\n            isOn: true,\n            isOverride: false\n        },\n        {\n            \"id\": uuid(),\n            name: 'delay',\n            order: 3,\n            isOn: true,\n            isOverride: false\n        },\n        {\n            \"id\": uuid(),\n            name: 'distortion',\n            order: 4,\n            isOn: true,\n            isOverride: false\n        }\n    ]\n}\n\nexport const getDefaultUserPatterns = (id) => {\n    let userPattern = {\n        id,\n        isQueuing: '',\n        patterns: []\n    }\n    for (let i = 0; i < 5; i++) {\n        userPattern.patterns[i] = getDefaultUserPattern(i)\n    }\n    return userPattern\n}\nexport const getDefaultUserPattern = (order) => {\n    return {\n        id: uuid(),\n        order,\n        state: {}\n    }\n}","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/utils/index.js",["408","409","410","411"],"import { getDefaultRoundData, getDefaultStepData } from './defaultData'\nimport { Limits, Colors } from './constants'\nimport _ from 'lodash'\n\nexport const createRound = (userId) => {\n    return getDefaultRoundData(userId)\n}\n\nexport const uuid = () => {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n        const r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\n        return v.toString(16);\n    });\n}\n\nexport const numberRange = (value, inMin, inMax, outMin, outMax) => {\n    return ((value - inMin) * (outMax - outMin)) / (inMax - inMin) + outMin\n}\n\nexport const randomBool = (probability = 0.5) => {\n    return Math.random() < probability\n}\n\nexport const randomItem = (items) => {\n    return items[Math.floor(Math.random() * items.length)]\n}\n\nexport const getRandomColor = () => {\n    return randomItem(Colors)\n    // return '#' + Math.floor(Math.random() * 16777215).toString(16);\n}\nexport const changeLayerLength = (layer, newLength) => {\n    const amount = layer.steps.length;\n    let difference = newLength - amount;\n    if (difference < 0) {\n        //remove the difference\n        const newSteps = [...layer.steps];\n        if (newLength < Limits.stepsPerLayer.min) {\n            newSteps.splice(Limits.stepsPerLayer.min, layer.steps.length - 1);\n        } else {\n            newSteps.splice(difference, 9e9);\n        }\n\n        return newSteps\n    }\n    if (difference > 0) {\n        // add new steps\n        let stepsToAdd = [];\n        if (newLength > Limits.stepsPerLayer.max) {\n            stepsToAdd = Array(Limits.stepsPerLayer.max - amount).fill(0).map(element => getDefaultStepData());\n        } else {\n            stepsToAdd = Array(difference).fill(0).map(element => getDefaultStepData());\n        }\n        let steps = [...layer.steps, ...stepsToAdd]\n        let i = 0;\n        steps.map((step) => {\n            step.order = i++;\n        })\n        steps = _.orderBy(steps, 'order')\n        return steps\n    }\n}\n\nexport const convertPercentToDB = (percent) => {\n    let dB;\n    if (percent > 60) {\n        dB = numberRange(percent, 60, 100, -6, 6)\n    } else {\n        dB = numberRange(percent, 0, 60, -48, -6)\n    }\n    if (dB <= -48) {\n        dB = -96\n    }\n    return dB;\n}\n\nexport const convertDBToPercent = (dB) => {\n    if (dB < -48) {\n        dB = -48\n    }\n    let percent;\n    if (dB > -6) {\n        percent = numberRange(dB, -6, 6, 60, 100)\n    } else {\n        percent = numberRange(dB, -48, -6, 0, 60)\n    }\n    return percent;\n}","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/components/play/layer-settings/LayerSettings.js",["412","413","414","415","416","417","418","419","420","421"],"import React, { useRef, useState, Component } from 'react'\nimport { connect, ReactReduxContext, Provider, useDispatch } from \"react-redux\";\nimport { Drawer } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport _ from 'lodash'\nimport { SET_LAYER_NAME, SET_LAYER_MUTE, SET_LAYER_PREVIEW, REMOVE_LAYER, SET_IS_SHOWING_LAYER_SETTINGS, SET_LAYER_STEPS } from '../../../redux/actionTypes'\nimport Box from '@material-ui/core/Box';\nimport { withStyles } from '@material-ui/core/styles';\n//import { convertPercentToDB, convertDBToPercent, numberRange } from '../../../utils/index'\nimport AudioEngine from '../../../audio-engine/AudioEngine'\n\nimport VolumeSlider from './VolumeSlider'\nimport LayerName from './LayerName'\nimport LayerInstrument from './LayerInstrument'\nimport LayerNumberOfSteps from './LayerNumberOfSteps'\nimport { FirebaseContext } from '../../../firebase';\nimport LayerType from './LayerType';\nimport LayerAutomation from './LayerAutomation';\nimport Track from '../../../audio-engine/Track'\n\nconst styles = theme => ({\n    root: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        height: \"100%\",\n        alignItems: \"center\",\n        '& > *': {\n            marginBottom: '1rem'\n        },\n        paddingTop: '2rem'\n    }\n})\n\nclass LayerSettings extends Component {\n    static contextType = FirebaseContext;\n    constructor (props) {\n        super(props)\n    }\n\n    onCloseClick () {\n        this.props.dispatch({ type: SET_IS_SHOWING_LAYER_SETTINGS, payload: { value: false } })\n    }\n\n    onPreviewClick () {\n        // todo: only audible to this user (mute for all others)\n    }\n\n    onMuteClick () {\n        const isMuted = !this.props.selectedLayer.instrument.isMuted\n        AudioEngine.tracksById[this.props.selectedLayer.id].setMute(isMuted)\n        this.props.dispatch({ type: SET_LAYER_MUTE, payload: { id: this.props.selectedLayer.id, value: isMuted, user: this.props.user.id } })\n    }\n\n    onDeleteLayerClick () {\n        this.props.dispatch({ type: REMOVE_LAYER, payload: { id: this.props.selectedLayer.id, user: this.props.user.id } })\n        this.context.deleteLayer(this.props.round.id, this.props.selectedLayer.id)\n        this.onCloseClick()\n    }\n\n    onClearStepsClick () {\n        let selectedLayerClone = _.cloneDeep(this.props.selectedLayer)\n        for (let step of selectedLayerClone.steps) {\n            step.isOn = false\n        }\n        this.props.dispatch({ type: SET_LAYER_STEPS, payload: { id: selectedLayerClone.id, steps: selectedLayerClone.steps } })\n        this.context.updateLayer(this.props.round.id, selectedLayerClone.id, { steps: selectedLayerClone.steps })\n    }\n\n    render () {\n        // console.log('Layer settings render()', this.props.user);\n        const { classes } = this.props\n        const selectedLayer = this.props.selectedLayer\n        let layerVolumePercent = 80;\n        let form = '';\n        if (!_.isNil(selectedLayer)) {\n            //layerVolumePercent = convertDBToPercent(selectedLayer.instrument.gain)\n            let layerTypeFormItems;\n            if (selectedLayer.type === Track.TRACK_TYPE_AUTOMATION) {\n                layerTypeFormItems = (\n                    <LayerAutomation selectedLayer={selectedLayer} roundId={this.props.round.id} userId={this.props.user.id} />\n                )\n            } else {\n                layerTypeFormItems = (\n                    <>\n                        <LayerInstrument selectedLayer={selectedLayer} roundId={this.props.round.id} user={this.props.user} />\n                        <div className={`${styles.layerSettingsVolumeSlider}`}>\n                            <VolumeSlider selectedLayer={selectedLayer} roundId={this.props.round.id} user={this.props.user} />\n                        </div>\n                        <Box display=\"flex\" justifyContent=\"space-evenly\">\n\n                            <Button onClick={this.onMuteClick.bind(this)} variant={selectedLayer.instrument.isMuted ? 'contained' : 'outlined'} disableElevation>Mute</Button>\n                        </Box>\n                    </>\n                )\n            }\n            form = (\n                <Box className={classes.root}>\n\n                    <LayerType selectedLayer={selectedLayer} roundId={this.props.round.id} userId={this.props.user.id} />\n                    <LayerNumberOfSteps selectedLayer={selectedLayer} roundId={this.props.round.id} user={this.props.user} />\n                    {layerTypeFormItems}\n                    <Button onClick={this.onClearStepsClick.bind(this)} variant=\"outlined\" disableElevation>Clear steps</Button>\n                    <Button onClick={this.onDeleteLayerClick.bind(this)} variant=\"outlined\" disableElevation>Delete layer</Button>\n                </Box>\n            )\n        }\n        return (\n            <div>\n                <Drawer\n                    open={this.props.isOpen}\n                    variant={\"persistent\"}\n                    bgcolor=\"secondary\"\n                >\n\n                    {form}\n\n                </Drawer>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    //  console.log('mapStateToProps', state);\n    let selectedLayer = null;\n    if (!_.isNil(state.display.selectedLayerId)) {\n        selectedLayer = _.find(state.round.layers, { id: state.display.selectedLayerId })\n    }\n    return {\n        round: state.round,\n        user: state.user,\n        selectedLayer,\n        isOpen: state.display.isShowingLayerSettings\n    };\n};\n\n\nexport default connect(\n    mapStateToProps\n)(withStyles(styles)(LayerSettings))","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/redux/reducers/round.js",[],"/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/redux/reducers/rounds.js",[],"/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/utils/constants.js",[],"/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/audio-engine/Track.js",["422"],"\nimport * as Tone from 'tone';\nimport Instruments from './Instruments';\nimport _ from 'lodash'\nimport FX from './FX';\nimport AudioEngine from './AudioEngine';\nimport Automation from './Automation';\n\nexport default class Track {\n    static TRACK_TYPE_LAYER = 'TRACK_TYPE_LAYER' // Each layer is routed to a user bus\n    static TRACK_TYPE_USER = 'TRACK_TYPE_USER' // User busses are routed to master\n    static TRACK_TYPE_MASTER = 'TRACK_TYPE_MASTER'\n    static TRACK_TYPE_AUTOMATION = 'TRACK_TYPE_AUTOMATION' // Each layer is routed to a user bus\n    constructor (trackParameters, type, userId) {\n        this.trackParameters = trackParameters\n        this.id = trackParameters.id\n        this.userId = userId\n        this.type = type\n        this.instrument = null\n        this.automation = null\n        this.notes = null\n        this.setType(type)\n    }\n    setType (type, automationFxId) {\n        this.dispose()\n        this.type = type;\n        this.trackParameters.type = type\n        if (this.type === Track.TRACK_TYPE_LAYER || this.type === Track.TRACK_TYPE_USER) {\n            this.channel = new Tone.Channel()\n            this.fx = null\n            this.sortedFx = null\n            if (_.isNil(this.trackParameters.fx)) {\n                this.trackParameters.fx = {}\n            }\n            const _this = this\n            this.createFX(this.trackParameters.fx).then(() => {\n                _this.buildAudioChain()\n            })\n\n            // todo fix this better, for some reason fx are not bypassing correctly to start with\n            setTimeout(() => {\n                // bypass all effects\n                console.log('fx hack todo: fix this');\n                for (const effect of _this.sortedFx) {\n                    effect.setBypass(true)\n                }\n            }, 3000);\n        } else if (this.type === Track.TRACK_TYPE_MASTER) {\n            this.channel = new Tone.Gain()\n        } else if (this.type === Track.TRACK_TYPE_AUTOMATION) {\n            if (!_.isNil(automationFxId)) {\n                this.trackParameters.automationFxId = automationFxId\n            }\n            this.automation = new Automation(this.trackParameters.automationFxId, this.userId)\n        }\n        this.calculatePart(this.trackParameters)\n    }\n    setFxOrder (updatedFxOrders) {\n        this.disconnectAudioChain()\n        for (let updatedFxOrder of updatedFxOrders) {\n            _.find(this.sortedFx, { id: updatedFxOrder.id }).order = updatedFxOrder.order\n        }\n        this.sortedFx = _.sortBy(this.sortedFx, 'order')\n        this.buildAudioChain()\n    }\n    load (trackParameters) {\n        this.trackParameters = trackParameters\n        this.calculatePart(trackParameters)\n\n    }\n    async createFX (fxList) {\n        return new Promise(async (resolve, reject) => {\n            if (!_.isNil(fxList)) {\n                this.fx = {}\n                this.sortedFx = []\n                for (let [fxId, fxObject] of Object.entries(fxList)) {\n                    let fx = await FX.create(fxObject)\n                    this.fx[fx.id] = fx\n                    this.sortedFx.push(fx)\n                }\n                this.sortedFx = _.sortBy(this.sortedFx, 'order')\n            }\n            resolve()\n        })\n    }\n    buildAudioChain () {\n        // console.log('Track::buildAudioChain()', this.type, this.id);\n        if (this.type === Track.TRACK_TYPE_MASTER) {\n            this.channel.toDestination()\n        } else if (this.type !== Track.TRACK_TYPE_AUTOMATION) {\n            this.disconnectAudioChain()\n            if (!_.isNil(this.instrument)) {\n                this.instrument.connect(this.channel)\n                //this.instrument.instrument.toDestination()\n            }\n            let onFx = _.filter(this.sortedFx, {\n                isOn: true\n            })\n            if (onFx.length > 0) {\n                for (let i = 0; i < onFx.length; i++) {\n                    let fx = onFx[i]\n                    // connect channel to first fx\n                    if (i === 0) {\n                        //   console.log('connecting channel to first fx', this.channel, 'to', fx);\n                        this.channel.connect(fx.fx)\n                    }\n\n                    // connect previous fx to this one\n                    if (i > 0) {\n                        //  console.log('connecting previous fx', onFx[i - 1], 'to', fx);\n                        onFx[i - 1].fx.connect(fx.fx)\n                    }\n\n                    // connect last fx to user bus or master\n                    if (i === onFx.length - 1) {\n                        if (this.type === Track.TRACK_TYPE_LAYER) {\n                            fx.fx.connect(AudioEngine.busesByUser[this.userId].channel)\n                        } else if (this.type === Track.TRACK_TYPE_USER) {\n                            //  console.log('connect last fx to master', fx, 'to', AudioEngine.master.channel);\n                            fx.fx.connect(AudioEngine.master.channel)\n                        } else {\n                            fx.fx.toDestination()\n                        }\n                    }\n                }\n            } else {\n                if (this.type === Track.TRACK_TYPE_LAYER) {\n                    // console.log('track connecting to ', AudioEngine.busesByUser[this.userId]);\n                    this.channel.connect(AudioEngine.busesByUser[this.userId].channel)\n                } else if (this.type === Track.TRACK_TYPE_USER) {\n                    // console.log('track connecting to master');\n                    this.channel.connect(AudioEngine.master.channel)\n                } else {\n                    //  console.log('track connecting to destination',);\n                    this.channel.toDestination()\n                }\n            }\n\n        }\n    }\n    disconnectAudioChain () {\n        if (!_.isNil(this.channel) && !_.isNil(this.channel.context._context)) {\n            this.channel.disconnect(0)\n        }\n\n        if (!_.isNil(this.sortedFx)) {\n            for (let fx of this.sortedFx) {\n                if (!_.isNil(fx.fx) && !_.isNil(fx.fx.context._context)) {\n                    fx.fx.disconnect(0)\n                }\n            }\n        }\n\n    }\n    dispose () {\n        this.disconnectAudioChain()\n        if (!_.isNil(this.instrument)) {\n            this.instrument.dispose()\n        }\n        if (!_.isNil(this.automation)) {\n            this.automation.dispose()\n        }\n        if (!_.isNil(this.sortedFx)) {\n            for (let fx of this.sortedFx) {\n                fx.dispose()\n            }\n        }\n        if (!_.isNil(this.channel)) {\n            try {\n                this.channel.dispose()\n            } catch (e) {\n                console.log('caught channel dispose error', e)\n            }\n        }\n    }\n    calculatePart (layer) {\n        this.trackParameters = layer\n        if (!_.isNil(layer)) {\n            if (this.type === Track.TRACK_TYPE_AUTOMATION) {\n                this.automation.clearPart()\n                this.automation.loadSteps(layer.steps)\n            } else {\n                if (_.isNil(this.instrument) || _.isNil(layer)) {\n                    return\n                }\n                this.instrument.clearPart()\n                this.notes = this.convertStepsToNotes(layer.steps)\n                _.sortBy(this.notes, 'time')\n                this.instrument.loadPart(this.notes, false)\n\n            }\n        }\n    }\n    convertStepsToNotes (steps) {\n        const PPQ = Tone.Transport.PPQ\n        const totalTicks = PPQ * 4\n        const ticksPerStep = Math.round(totalTicks / steps.length)\n        //  console.log('convertStepsToNotes()', steps, PPQ, ticksPerStep);\n        let notes = []\n        for (let i = 0; i < steps.length; i++) {\n            let step = steps[i]\n            if (step.isOn) {\n                const note = {\n                    time: i * ticksPerStep,\n                    duration: ticksPerStep,\n                    midi: 60,\n                    velocity: Number(step.velocity),\n                    probability: step.probability\n                }\n                notes.push(note)\n            }\n        }\n        // console.log('notes', notes);\n        return notes\n    }\n    async setInstrument (instrument) {\n        // console.time('setInstrument')\n        const instrumentName = instrument.sampler\n        const articulation = instrument.sample\n        let _this = this\n        return new Promise(async function (resolve, reject) {\n            if (!_.isNil(_this.instrument)) {\n                Instruments.dispose(_this.instrument.id)\n            }\n            _this.instrument = await Instruments.create(\n                instrumentName,\n                articulation\n            )\n            //console.timeEnd('setInstrument')\n            _this.buildAudioChain()\n            if (!_.isNil(_this.notes)) {\n                _this.instrument.loadPart(_this.notes, false)\n            }\n            // _this.calculatePart()\n            _this.instrument.setVolume(_this.channel.volume.value)\n\n            resolve(_this.instrument)\n        })\n    }\n    setAutomatedFx (fxId) {\n        if (!_.isNil(this.automation)) {\n            this.automation.setFx(fxId)\n        } else {\n            this.createAutomation(fxId, this.userId)\n        }\n        this.calculatePart(this.trackParameters)\n    }\n    createAutomation (fxId, userId) {\n        this.automation = new Automation(fxId, userId)\n    }\n    setVolume (value) {\n        this.channel.volume.value = value\n        if (!_.isNil(this.instrument)) {\n            this.instrument.setVolume(value)\n        }\n    }\n    setSolo (value) {\n        this.channel.solo = value\n    }\n    setMute (value) {\n        this.channel.mute = value\n    }\n    async setMixerSettings (settings) {\n        let _this = this\n        return new Promise(async function (resolve, reject) {\n            await _this.setStyle(settings.style)\n            _this.setVolume(settings.volume)\n            for (let [fxId, fxParameters] of Object.entries(settings.fx)) {\n                for (let [fxParameterName, fxValue] of Object.entries(fxParameters)) {\n                    _this.setFXParameter(fxId, fxParameterName, fxValue)\n                }\n            }\n            resolve()\n        })\n    }\n    async setFXIsOn (fxId, value) {\n        this.disconnectAudioChain()\n        this.fx[fxId].isOn = value\n        this.buildAudioChain()\n    }\n    setFXParameter (fxId, parameter, value) {\n        if (this.fx[fxId].isOn) {\n            this.fx[fxId][parameter] = value\n        }\n    }\n    releaseAll () {\n        if (!_.isNil(this.instrument)) {\n            this.instrument.releaseAll()\n        }\n    }\n    triggerNote (note) {\n        this.instrument.triggerNote(note)\n    }\n    triggerAttack (pitch, velocity) {\n        this.instrument.triggerAttack(pitch, velocity)\n    }\n    triggerRelease (pitch) {\n        this.instrument.triggerRelease(pitch)\n    }\n    getNotes () {\n        return this.notes\n    }\n}\n","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/components/play/layer-settings/LayerAutomation.js",["423","424","425"],"import React, { useState, useCallback, useEffect, useContext } from 'react'\nimport { useDispatch } from \"react-redux\";\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Box from '@material-ui/core/Box';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { UPDATE_LAYER_AUTOMATION_FX_ID } from '../../../redux/actionTypes'\nimport { FirebaseContext } from '../../../firebase';\nimport AudioEngine from '../../../audio-engine/AudioEngine'\nimport _ from 'lodash'\n\nconst useStyles = makeStyles((theme) => ({\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 188,\n    },\n    selectEmpty: {\n        marginTop: theme.spacing(2),\n    },\n}));\n\nexport default function LayerAutomation ({ selectedLayer, userId, roundId }) {\n    const dispatch = useDispatch();\n    const firebase = useContext(FirebaseContext);\n    const classes = useStyles();\n    const userBus = AudioEngine.busesByUser[userId]\n    console.log('userBus', userBus, AudioEngine);\n\n    const defaultSelectedFx = !_.isNil(userBus.sortedFx[0]) ? userBus.sortedFx[0].id : null\n\n    const [selectedFX, setSelectedFX] = React.useState(!_.isNil(selectedLayer.automationFxId) ? selectedLayer.automationFxId : defaultSelectedFx)\n    const onFXSelect = (event) => {\n        console.log('onFXSelect', event.target.value);\n        setSelectedFX(event.target.value);\n        // const defaultArticulation = Instruments.getDefaultArticulation(event.target.value)[0]\n        // setSelectedArticulation(defaultArticulation)\n        dispatch({ type: UPDATE_LAYER_AUTOMATION_FX_ID, payload: { id: selectedLayer.id, value: event.target.value } })\n        firebase.updateLayer(roundId, selectedLayer.id, { automationFxId: event.target.value })\n    };\n    const fxMenuItems = userBus.sortedFx.map(fx => <MenuItem value={fx.id} key={fx.id}>{fx.label}</MenuItem>)\n\n    console.log('fxMenuItems', fxMenuItems);\n\n    /* const articulationOptions = Instruments.getInstrumentArticulationOptions(selectedLayer.instrument.sampler)\n     const [selectedArticulation, setSelectedArticulation] = React.useState(selectedLayer.instrument.sample)\n     const onArticulationSelect = (event) => {\n         setSelectedArticulation(event.target.value);\n         dispatch({ type: UPDATE_LAYER_INSTRUMENT, payload: { id: selectedLayer.id, instrument: { sample: event.target.value }, user: user.id } })\n     \n     };\n     const articulationMenuItems = articulationOptions.map(articulation => <MenuItem value={articulation.name} key={articulation.name}>{articulation.name}</MenuItem>)\n     */\n    useEffect(() => {\n        setSelectedFX(!_.isNil(selectedLayer.automationFxId) ? selectedLayer.automationFxId : defaultSelectedFx)\n    }, [selectedLayer.id])\n    return (\n        <div>\n            <Box display=\"flex\" flexDirection=\"column\">\n                <FormControl className={classes.formControl}>\n                    <InputLabel htmlFor=\"fx-select-label\">FX</InputLabel>\n                    <Select\n                        value={selectedFX}\n                        onChange={onFXSelect}\n                        labelId=\"fx-select-label\"\n                    >\n                        {fxMenuItems}\n                    </Select>\n                </FormControl>\n\n            </Box>\n\n        </div>\n    )\n}\n","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/components/play/layer-settings/LayerType.js",["426","427","428","429","430"],"import React, { useState, useCallback, useEffect, useContext } from 'react'\nimport { useDispatch } from \"react-redux\";\nimport Instruments from '../../../audio-engine/Instruments'\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Box from '@material-ui/core/Box';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { SET_LAYER_TYPE, UPDATE_LAYER_AUTOMATION_FX_ID } from '../../../redux/actionTypes'\nimport { changeLayerLength } from '../../../utils/index'\nimport AudioEngine from '../../../audio-engine/AudioEngine'\nimport { FirebaseContext } from '../../../firebase';\nimport Track from '../../../audio-engine/Track'\nimport _ from 'lodash'\n\nconst useStyles = makeStyles((theme) => ({\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 188,\n    },\n    selectEmpty: {\n        marginTop: theme.spacing(2),\n    },\n}));\n\nexport default function LayerType ({ selectedLayer, userId, roundId }) {\n    console.log('LayerType', selectedLayer);\n    const dispatch = useDispatch();\n    const classes = useStyles();\n    const firebase = useContext(FirebaseContext);\n    const typeOptions = [{ value: Track.TRACK_TYPE_LAYER, label: 'Notes' }, { value: Track.TRACK_TYPE_AUTOMATION, label: 'Automation' }]\n    const [selectedType, setSelectedType] = React.useState(selectedLayer.type)\n    const onTypeSelect = (event) => {\n        console.log('onTypeSelect()', event.target.value);\n        setSelectedType(event.target.value);\n        if (event.target.value === Track.TRACK_TYPE_LAYER) {\n            // AudioEngine.tracksById[selectedLayer.id].setType(event.target.value)\n            dispatch({ type: SET_LAYER_TYPE, payload: { id: selectedLayer.id, value: event.target.value } })\n            firebase.updateLayer(roundId, selectedLayer.id, { type: event.target.value })\n        } else {\n            // automation type\n            const userBus = AudioEngine.busesByUser[userId]\n            const defaultSelectedFx = !_.isNil(userBus.sortedFx[0]) ? userBus.sortedFx[0].id : null\n            //AudioEngine.tracksById[selectedLayer.id].setType(event.target.value)\n            dispatch({ type: SET_LAYER_TYPE, payload: { id: selectedLayer.id, value: event.target.value } })\n            dispatch({ type: UPDATE_LAYER_AUTOMATION_FX_ID, payload: { id: selectedLayer.id, value: defaultSelectedFx } })\n            firebase.updateLayer(roundId, selectedLayer.id, { type: event.target.value, automationFxId: defaultSelectedFx })\n        }\n    };\n    const typeMenuItems = typeOptions.map(type => <MenuItem value={type.value} key={type.value}>{type.label}</MenuItem>)\n\n\n    useEffect(() => {\n        setSelectedType(selectedLayer.type)\n    }, [selectedLayer.id])\n    return (\n        <div>\n            <Box display=\"flex\" flexDirection=\"column\">\n                <FormControl className={classes.formControl}>\n                    <InputLabel htmlFor=\"layer-type-select-label\">Layer type</InputLabel>\n                    <Select\n                        value={selectedType}\n                        onChange={onTypeSelect}\n                        labelId=\"layer-type-select-label\"\n                    >\n                        {typeMenuItems}\n                    </Select>\n                </FormControl>\n            </Box>\n\n        </div>\n    )\n}\n","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/components/play/layer-settings/LayerNumberOfSteps.js",["431","432","433","434","435"],"import React, { useState, useCallback, useEffect, useContext } from 'react'\nimport { useDispatch } from \"react-redux\";\nimport Instruments from '../../../audio-engine/Instruments'\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Box from '@material-ui/core/Box';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { SET_LAYER_STEPS } from '../../../redux/actionTypes'\nimport { changeLayerLength } from '../../../utils/index'\nimport AudioEngine from '../../../audio-engine/AudioEngine'\nimport { FirebaseContext } from '../../../firebase';\n\n\n\nconst useStyles = makeStyles((theme) => ({\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 188,\n    },\n    selectEmpty: {\n        marginTop: theme.spacing(2),\n    },\n}));\n\nexport default function LayerNumberOfSteps ({ selectedLayer, user, roundId }) {\n    const dispatch = useDispatch();\n    const classes = useStyles();\n    const firebase = useContext(FirebaseContext);\n    const numberOfStepsOptions = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]\n    const [selectedNumberOfSteps, setSelectedNumberOfSteps] = React.useState(selectedLayer.steps.length)\n    const onNumberOfStepsSelect = (event) => {\n        setSelectedNumberOfSteps(event.target.value);\n        let newSteps = changeLayerLength(selectedLayer, event.target.value)\n        dispatch({ type: SET_LAYER_STEPS, payload: { id: selectedLayer.id, steps: newSteps, user: user.id } })\n        firebase.updateLayer(roundId, selectedLayer.id, selectedLayer)\n    };\n    const numberOfStepsMenuItems = numberOfStepsOptions.map(numberOfSteps => <MenuItem value={numberOfSteps} key={numberOfSteps}>{numberOfSteps}</MenuItem>)\n\n\n    useEffect(() => {\n        setSelectedNumberOfSteps(selectedLayer.steps.length)\n    }, [selectedLayer.id])\n    return (\n        <div>\n            <Box display=\"flex\" flexDirection=\"column\">\n                <FormControl className={classes.formControl}>\n                    <InputLabel htmlFor=\"number-of-steps-select-label\">Number of steps</InputLabel>\n                    <Select\n                        value={selectedNumberOfSteps}\n                        onChange={onNumberOfStepsSelect}\n                        labelId=\"number-of-steps-select-label\"\n                    >\n                        {numberOfStepsMenuItems}\n                    </Select>\n                </FormControl>\n            </Box>\n\n        </div>\n    )\n}\n","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/components/play/layer-settings/LayerInstrument.js",["436","437","438"],"import React, { useState, useCallback, useEffect, useContext } from 'react'\nimport { useDispatch } from \"react-redux\";\nimport Instruments from '../../../audio-engine/Instruments'\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Box from '@material-ui/core/Box';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { UPDATE_LAYER_INSTRUMENT } from '../../../redux/actionTypes'\nimport { FirebaseContext } from '../../../firebase';\n\nconst useStyles = makeStyles((theme) => ({\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 188,\n        marginBottom: '1rem'\n    },\n    selectEmpty: {\n        marginTop: theme.spacing(2),\n    },\n}));\n\nexport default function LayerInstrument ({ selectedLayer, user, roundId }) {\n    const dispatch = useDispatch();\n    const firebase = useContext(FirebaseContext);\n    const classes = useStyles();\n    const instrumentOptions = Instruments.getInstrumentOptions()\n    console.log('LAyerInstruments instrumentOptions', instrumentOptions);\n    const [selectedInstrument, setSelectedInstrument] = React.useState(selectedLayer.instrument.sampler)\n    const onInstrumentSelect = (event) => {\n        setSelectedInstrument(event.target.value);\n        console.log('onInstrumentSelect()', event.target.value);\n        const defaultArticulation = Instruments.getDefaultArticulation(event.target.value)[0]\n        setSelectedArticulation(defaultArticulation)\n        dispatch({ type: UPDATE_LAYER_INSTRUMENT, payload: { id: selectedLayer.id, instrument: { sampler: event.target.value, sample: defaultArticulation }, user: user.id } })\n        firebase.updateLayer(roundId, selectedLayer.id, { instrument: { sampler: event.target.value, sample: defaultArticulation } })\n    };\n    const instrumentMenuItems = instrumentOptions.map(instrument => <MenuItem value={instrument.name} key={instrument.name}>{instrument.label}</MenuItem>)\n\n    const articulationOptions = Instruments.getInstrumentArticulationOptions(selectedLayer.instrument.sampler)\n    const [selectedArticulation, setSelectedArticulation] = React.useState(selectedLayer.instrument.sample)\n    const onArticulationSelect = (event) => {\n        setSelectedArticulation(event.target.value);\n        dispatch({ type: UPDATE_LAYER_INSTRUMENT, payload: { id: selectedLayer.id, instrument: { sample: event.target.value }, user: user.id } })\n        firebase.updateLayer(roundId, selectedLayer.id, { instrument: { sample: event.target.value } })\n    };\n    const articulationMenuItems = articulationOptions.map(articulation => <MenuItem value={articulation.name} key={articulation.name}>{articulation.name}</MenuItem>)\n    useEffect(() => {\n        setSelectedInstrument(selectedLayer.instrument.sampler)\n        setSelectedArticulation(selectedLayer.instrument.sample)\n    }, [selectedLayer.id])\n    return (\n        <div>\n            <Box display=\"flex\" flexDirection=\"column\">\n                <FormControl className={classes.formControl}>\n                    <InputLabel htmlFor=\"instrument-select-label\">Instrument</InputLabel>\n                    <Select\n                        value={selectedInstrument}\n                        onChange={onInstrumentSelect}\n                        labelId=\"instrument-select-label\"\n                    >\n                        {instrumentMenuItems}\n                    </Select>\n                </FormControl>\n                <FormControl className={classes.formControl}>\n                    <InputLabel htmlFor=\"articulation-select-label\">Sound</InputLabel>\n                    <Select\n                        value={selectedArticulation}\n                        onChange={onArticulationSelect}\n                        labelId=\"articulation-select-label\"\n                    >\n                        {articulationMenuItems}\n                    </Select>\n                </FormControl>\n            </Box>\n\n        </div>\n    )\n}\n","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/components/play/layer-settings/LayerName.js",["439","440","441","442","443"],"import React, { useState, useCallback, useEffect } from 'react'\nimport TextField from '@material-ui/core/TextField';\nimport _ from 'lodash'\nimport { connect, ReactReduxContext, Provider, useDispatch } from \"react-redux\";\nimport { SET_LAYER_NAME, SET_DISABLE_KEY_LISTENER } from '../../../redux/actionTypes'\n\nexport default function LayerName ({ selectedLayer, user }) {\n    const dispatch = useDispatch();\n    const [textValue, setTextValue] = useState(selectedLayer.name)\n    const updateLayerNameState = (name, selectedLayerId) => {\n        dispatch({ type: SET_LAYER_NAME, payload: { id: selectedLayerId, name, user: user.id } })\n    }\n    const updateLayerNameStateThrottled = useCallback(_.throttle(function (name, selectedLayerId) {\n        updateLayerNameState(name, selectedLayerId)\n    }, 1000), []);\n    const onTextChange = (e) => {\n        setTextValue(e.target.value)\n        updateLayerNameStateThrottled(e.target.value, selectedLayer.id)\n    }\n    const onFocus = (e) => {\n        dispatch({ type: SET_DISABLE_KEY_LISTENER, payload: { value: true } })\n    }\n    const onLoseFocus = (e) => {\n        dispatch({ type: SET_DISABLE_KEY_LISTENER, payload: { value: false } })\n    }\n\n    useEffect(() => {\n        //console.log('selectedLayer.id changed', selectedLayer.id, selectedLayer.instrument.gain);\n        setTextValue(selectedLayer.name)\n    }, [selectedLayer.id])\n    return (\n        <div>\n            <TextField id=\"standard-basic\" value={textValue || ''} onChange={onTextChange} onFocus={onFocus} onBlur={onLoseFocus} />\n        </div>\n    )\n}\n","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/components/play/layer-settings/VolumeSlider.js",["444","445","446","447","448","449"],"import React, { useState, useCallback, useEffect, useContext } from 'react'\nimport { connect, ReactReduxContext, Provider, useDispatch } from \"react-redux\";\nimport Slider from '@material-ui/core/Slider';\nimport _ from 'lodash'\nimport AudioEngine from '../../../audio-engine/AudioEngine'\nimport { convertPercentToDB, convertDBToPercent } from '../../../utils/index'\nimport { updateLayerInstrument } from '../../../redux/actions'\nimport { SET_LAYER_GAIN } from '../../../redux/actionTypes'\nimport { FirebaseContext } from '../../../firebase';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst styles = makeStyles(function (theme) {\n    return {\n        root: {\n            height: 150\n        }\n    }\n})\n\nexport default function VolumeSlider ({ selectedLayer, user, roundId }) {\n    const dispatch = useDispatch();\n    const firebase = useContext(FirebaseContext);\n    const [sliderValue, setSliderValue] = useState(80)\n    const updateVolumeState = (dB, selectedLayerId) => {\n        dispatch({ type: SET_LAYER_GAIN, payload: { id: selectedLayerId, value: dB, user: user.id } })\n        firebase.updateLayer(roundId, selectedLayer.id, { gain: dB })\n    }\n    const updateVolumeStateThrottled = useCallback(_.throttle(function (dB, selectedLayerId) {\n        updateVolumeState(dB, selectedLayerId)\n    }, 2000), []);\n    const onSliderChange = (e, percent) => {\n        setSliderValue(percent)\n        const dB = convertPercentToDB(percent)\n        AudioEngine.tracksById[selectedLayer.id].setVolume(dB)\n        updateVolumeStateThrottled(dB, selectedLayer.id)\n    }\n\n    useEffect(() => {\n        //console.log('selectedLayer.id changed', selectedLayer.id, selectedLayer.instrument.gain);\n        setSliderValue(convertDBToPercent(selectedLayer.gain))\n    }, [selectedLayer.id])\n\n    const verticalSliderMarks = [\n        {\n            value: 100,\n            label: '+6',\n        },\n        {\n            value: 80,\n            label: '0',\n        },\n        {\n            value: 60,\n            label: '-6',\n        },\n\n        {\n            value: 34,\n            label: '-24',\n        },\n\n        {\n            value: 0,\n            label: '-96',\n        }\n    ];\n\n    const classes = styles()\n    //console.log('rendering volume slider', selectedLayer.id);\n    return (\n\n        <div className={classes.root}>\n            <Slider\n\n                orientation=\"vertical\"\n                value={sliderValue}\n                min={0}\n                max={100}\n                aria-labelledby=\"vertical-slider\"\n                marks={verticalSliderMarks}\n                onChange={onSliderChange}\n            />\n        </div>\n    )\n}\n","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/components/play/PatternThumbControl.js",["450","451"],"/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/components/play/EffectThumbControl.js",["452"],"import React, { Component } from 'react'\nimport { SVG } from '@svgdotjs/svg.js'\nimport { LockOpen } from '@material-ui/icons';\nimport FX from '../../audio-engine/FX'\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/styles';\n\nconst styles = theme => ({\n    button: {\n        cursor: 'pointer',\n        '&:hover': {\n            opacity: 0.8\n        }\n    },\n    iconDark: {\n        color: '#222222'\n    }\n})\n\nconst thumbWidth = 48;\nconst thumbHeight = 48;\nconst containerWidth = thumbWidth + 40\n\nclass EffectThumbControl extends Component {\n    constructor (props) {\n        super(props);\n        this.thumbControlRef = React.createRef();\n        this.isOn = false // this.props.isOn\n        this.onMouseMove = this.onMouseMove.bind(this)\n        this.onMouseUp = this.onMouseUp.bind(this)\n    }\n    componentDidMount () {\n        const element = this.thumbControlRef.current;\n\n        this.container = SVG()\n            .addTo(element)\n            .size(thumbWidth + 40, thumbHeight)\n        this.background = this.container.rect(thumbWidth + 40, thumbHeight).fill('none').radius(24)\n        this.thumb = this.container.nested()\n        this.thumb.x(containerWidth - thumbWidth)\n        this.thumb.addClass(this.props.classes.button)\n        this.thumbBackground = this.thumb.rect(thumbWidth, thumbHeight).fill('#474747').radius(24)\n        this.labelContainer = this.thumb.nested()\n        //this.label = this.thumb.svg('<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M18 8h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zm-6 9c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2zm3.1-9H8.9V6c0-1.71 1.39-3.1 3.1-3.1 1.71 0 3.1 1.39 3.1 3.1v2z\"/></svg>')\n        console.log('icon', FX.getIcon(this.props.name));\n        this.label = this.labelContainer.svg(FX.getIcon(this.props.name))\n        this.label.x((thumbWidth / 2) - (this.label.node.getBBox().width / 2))\n        this.label.y((thumbHeight / 2) - (this.label.node.getBBox().height / 2))\n        // this.label.x(10)\n        // this.label.y(10)\n        //this.lock = this.container.rect(36, 36).fill('#ffffff')\n        //this.lock.svg('<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M18 8h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zm-6 9c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2zm3.1-9H8.9V6c0-1.71 1.39-3.1 3.1-3.1 1.71 0 3.1 1.39 3.1 3.1v2z\"/></svg>')\n        /* this.label = this.thumb.plain(this.props.label)\n         this.label.font({\n             family: 'Arial',\n             size: 14,\n             weight: 600\n         })*/\n        //this.label = this.thumb.svg('<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M18 8h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zm-6 9c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2zm3.1-9H8.9V6c0-1.71 1.39-3.1 3.1-3.1 1.71 0 3.1 1.39 3.1 3.1v2z\"/></svg>')\n\n        // this.label.fill('#EAEAEA')\n        //  this.label.x((thumbWidth / 2) - (this.label.node.getBBox().width / 2))\n        // this.label.y((thumbHeight / 2) - (this.label.node.getBBox().height / 2))\n\n        // this.thumb.style({ color: '#222222' })\n\n        this.addEventListeners()\n    }\n    addEventListeners () {\n        const _this = this\n        this.thumb.on('touchstart', (e) => {\n            e.preventDefault()\n            // console.log('touchstart', e, e.touches.length - 1);\n            this.switchOn()\n            this.touchIndex = e.touches.length - 1\n            this.dragStart = e.touches[this.touchIndex].pageX\n            this.thumbBackground.fill('#EAEAEA')\n            //  this.label.fill('#222222')\n        })\n        this.thumb.on('touchmove', (e) => {\n            e.preventDefault()\n            let x = e.touches[this.touchIndex].pageX - this.dragStart\n            if (!this.isOn) {\n                //  x = (containerWidth - thumbWidth) + e.touches[this.touchIndex].pageX - this.dragStart\n                x = (containerWidth - thumbWidth) + e.touches[this.touchIndex].pageX - this.dragStart\n            }\n            //      console.log('touchmove', this.touchIndex, e, 'x', x);\n            if (x > containerWidth - thumbWidth) {\n                x = containerWidth - thumbWidth\n            } else if (x < 0) {\n                x = 0\n            }\n            this.thumb.x(x)\n        })\n        this.thumb.on('touchend', (e) => {\n            e.preventDefault()\n            const threshold = (containerWidth - thumbWidth) / 2\n            let x = this.thumb.x()\n            if (x > threshold) {\n                x = containerWidth - thumbWidth\n                this.isOn = false\n                this.thumbBackground.fill('#474747')\n                this.label.removeClass(this.props.classes.iconDark)\n                this.switchOff()\n            } else {\n                x = 0\n                this.isOn = true\n                //this.thumbBackground.fill('#474747')\n                this.label.addClass(this.props.classes.iconDark)\n            }\n            this.thumb.x(x)\n        })\n        this.thumb.on('mousedown', (e) => {\n            e.preventDefault()\n            this.switchOn()\n            this.dragStart = e.pageX\n            this.thumbBackground.fill('#EAEAEA')\n            this.label.addClass(this.props.classes.iconDark)\n            document.addEventListener('mousemove', this.onMouseMove)\n            document.addEventListener('mouseup', this.onMouseUp)\n        })\n    }\n    onMouseMove (e) {\n        e.preventDefault()\n        let x = e.pageX - this.dragStart\n        if (!this.isOn) {\n            x = (containerWidth - thumbWidth) + e.pageX - this.dragStart\n        }\n        if (x > containerWidth - thumbWidth) {\n            x = containerWidth - thumbWidth\n        } else if (x < 0) {\n            x = 0\n        }\n        this.thumb.x(x)\n    }\n    onMouseUp (e) {\n        e.preventDefault()\n        document.removeEventListener('mouseup', this.onMouseUp)\n        document.removeEventListener('mousemove', this.onMouseMove)\n\n        const threshold = (containerWidth - thumbWidth) / 2\n        let x = this.thumb.x()\n        if (x > threshold) {\n            x = containerWidth - thumbWidth\n            this.isOn = false;\n            this.switchOff()\n            this.thumbBackground.fill('#474747')\n            this.label.removeClass(this.props.classes.iconDark)\n        } else {\n            x = 0\n            this.isOn = true\n            //this.thumbBackground.fill('#474747')\n            this.label.addClass(this.props.classes.iconDark)\n        }\n        this.thumb.x(x)\n    }\n    switchOn () {\n        this.props.switchOn(this.props.fxId)\n        //console.log('switchOn()', AudioEngine.busesByUser[this.props.userId]);\n        // AudioEngine.busesByUser[this.props.userId].fx[this.props.fxId].override = true\n        // this.props.dispatch({ type: SET_USER_BUS_FX_OVERRIDE, payload: { fxId: this.props.fxId, userId: this.props.userId, value: true } })\n    }\n    switchOff () {\n        this.isOn = false\n        this.props.switchOff(this.props.fxId)\n        //console.log('switchOff()', AudioEngine.busesByUser[this.props.userId]);\n        //AudioEngine.busesByUser[this.props.userId].fx[this.props.fxId].override = false\n        // this.props.dispatch({ type: SET_USER_BUS_FX_OVERRIDE, payload: { fxId: this.props.fxId, userId: this.props.userId, value: false } })\n    }\n    render () {\n        return (\n            <div style={{ width: '88px', height: '48px', backgroundColor: 'rgba(0,0,0,0.5)', borderRadius: '24px', position: 'relative', marginBottom: '0.5rem' }}>\n                <LockOpen fontSize=\"small\" style={{ color: '#474747', position: 'absolute', left: '10px', top: '12px', zIndex: 1 }} />\n                <div style={{ zIndex: 2, position: 'absolute' }}>\n                    <div ref={this.thumbControlRef} style={{ display: 'flex', zIndex: 2 }}></div>\n                </div>\n            </div >\n\n        )\n    }\n}\nEffectThumbControl.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\nexport default (withStyles(styles)(EffectThumbControl))","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/audio-engine/FX.js",[],"/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/audio-engine/Instruments.js",["453"],"\nimport _ from \"lodash\";\nimport BassDrum from './instruments/BassDrum'\nimport HiHatClosed from './instruments/HiHatClosed'\nimport HitHatOpen from './instruments/HitHatOpen'\nimport SnareDrum from './instruments/SnareDrum'\nimport Clap from './instruments/Clap'\nimport Claves from './instruments/Claves'\nimport Congas from './instruments/Congas'\nimport Cowbell from './instruments/Cowbell'\nimport Cymbal from './instruments/Cymbal'\nimport Maracas from './instruments/Maracas'\nimport Rimshot from './instruments/Rimshot'\nimport TomToms from './instruments/TomToms'\n\nconst Instruments = {\n    instrumentClasses: {},\n    instruments: [],\n    init () {\n        const classes = [\n            BassDrum,\n            HiHatClosed,\n            SnareDrum,\n            HitHatOpen,\n            Clap,\n            Claves,\n            Congas,\n            Cowbell,\n            Cymbal,\n            Maracas,\n            Rimshot,\n            TomToms\n        ];\n        for (let instrumentClass of classes) {\n            this.instrumentClasses[instrumentClass.instrumentName] = instrumentClass;\n        }\n    },\n    create (instrumentName, articulation) {\n        if (!_.isNil(instrumentName)) {\n            let _this = this;\n            return new Promise(async function (resolve, reject) {\n                let InstrumentClass = _this.instrumentClasses[instrumentName];\n                let instrument = new InstrumentClass();\n                await instrument.load(articulation);\n                _this.instruments.push(instrument);\n                resolve(instrument);\n            });\n        }\n    },\n    dispose (id) {\n        let instrument = _.find(this.instruments, {\n            id\n        });\n        if (!_.isNil(instrument)) {\n            instrument.dispose();\n        }\n    },\n    updateParameter (instrumentId, parameter, value) {\n        _.find(this.instruments, {\n            id: instrumentId\n        }).updateParameter(parameter, value);\n    },\n    getInstrumentOptions (channelName) {\n        let options = [];\n        for (let [key, instrument] of Object.entries(this.instrumentClasses)) {\n            options.push({\n                label: instrument.label,\n                name: instrument.instrumentName,\n                articulations: instrument.articulations\n            });\n        }\n        options = _.sortBy(options, \"label\");\n        return options;\n    },\n    getInstrumentArticulationOptions (instrumentName) {\n        let options = [];\n        for (let [name, value] of Object.entries(\n            this.instrumentClasses[instrumentName].articulations\n        )) {\n            let option = {\n                name,\n                value\n            };\n            options.push(option);\n        }\n        return options;\n    },\n    getLabel (instrumentName) {\n        return this.instrumentClasses[instrumentName].label;\n    },\n    getArticulationLabel (instrumentName, articulation) {\n        return this.instrumentClasses[instrumentName].articulations[articulation];\n    },\n    getDefaultArticulation (instrumentName) {\n        console.log('Instruments::getDefaultArticulation() instrumentName', instrumentName, this.instrumentClasses);\n        return !_.isNil(this.instrumentClasses[instrumentName].defaultArticulation)\n            ? this.instrumentClasses[instrumentName].defaultArticulation\n            : \"none\";\n    }\n};\n\nexport default Instruments;\n","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/audio-engine/Automation.js",["454"],"\nimport * as Tone from 'tone';\nimport _ from 'lodash'\nimport AudioEngine from '../audio-engine/AudioEngine'\nconst Note = require('@tonaljs/note')\n\nexport default class Automation {\n    constructor (fxId, userId) {\n        this.userId = userId\n        this.fx = null\n        this.setFx(fxId)\n    }\n    setFx (fxId) {\n        //console.log('Automation::setFx()', fxId, this.userId, AudioEngine.busesByUser);\n        this.dispose()\n        if (!_.isNil(fxId)) {\n            this.fxId = fxId\n            this.fx = _.find(AudioEngine.busesByUser[this.userId].sortedFx, { id: this.fxId })\n            //console.log('automation fx', this.fx);\n        }\n    }\n    loadSteps (steps) {\n        // console.log('automation loading steps', steps, this.fx);\n        this.clearPart()\n        let notes = this.convertStepsToNotes(steps)\n\n        const toneNotes = _.cloneDeep(notes)\n        for (let toneNote of toneNotes) {\n            toneNote.time += 'i';\n            toneNote.duration += 'i';\n        }\n        const fx = this.fx\n        const automationOptions = fx.getAutomationOptions()\n        const enabledOption = _.find(automationOptions, { name: 'enabled' })\n\n        this.part = new Tone.Part(function (time, note) {\n            //const frequency = note.isOn ? 500 : 20000\n            //fx.fx.frequency.setValueAtTime(frequency, time)\n            if (note.isOn) {\n                enabledOption.setParameter(enabledOption.calculateValue(true), time)\n            } else {\n                enabledOption.setParameter(enabledOption.calculateValue(false), time)\n            }\n\n        }, toneNotes)\n        this.part.start(0)\n    }\n    convertStepsToNotes (steps) {\n        const PPQ = Tone.Transport.PPQ\n        const totalTicks = PPQ * 4\n        const ticksPerStep = Math.round(totalTicks / steps.length)\n        let notes = []\n        let currentNote;\n        for (let i = 0; i < steps.length; i++) {\n            const step = steps[i]\n            if (step.isOn) {\n                if (_.isNil(currentNote)) {\n                    currentNote = {\n                        time: i * ticksPerStep,\n                        duration: 0\n                    }\n                }\n                currentNote.duration += ticksPerStep\n            } else {\n                if (!_.isNil(currentNote)) {\n                    let noteOn = _.cloneDeep(currentNote)\n                    noteOn.isOn = true\n                    let noteOff = _.cloneDeep(currentNote)\n                    noteOff.isOn = false\n                    noteOff.time = currentNote.time + currentNote.duration\n                    notes.push(noteOn)\n                    notes.push(noteOff)\n                    currentNote = null\n                } else if (i === 0) {\n                    currentNote = {\n                        time: 0,\n                        duration: ticksPerStep\n                    }\n                    let noteOff = _.cloneDeep(currentNote)\n                    noteOff.isOn = false\n                    notes.push(noteOff)\n                    currentNote = null\n                }\n            }\n            if (i === steps.length - 1) {\n                if (!_.isNil(currentNote)) {\n                    let noteOn = _.cloneDeep(currentNote)\n                    noteOn.isOn = true\n                    let noteOff = _.cloneDeep(currentNote)\n                    noteOff.isOn = false\n                    noteOff.time = currentNote.time + currentNote.duration\n                    notes.push(noteOn)\n                    notes.push(noteOff)\n                    currentNote = null\n                }\n            }\n        }\n        return notes\n    }\n    clearPart () {\n        if (!_.isNil(this.part) && !_.isNil(this.part._events)) {\n            this.part.dispose()\n        }\n    }\n    dispose () {\n        // console.log('automation dispose()');\n        if (!_.isNil(this.fx)) {\n            this.clearPart()\n            // restore fx back to default (bypassed) state\n            // console.log('bypassing old fx');\n            const fx = this.fx\n            const automationOptions = fx.getAutomationOptions()\n            const enabledOption = _.find(automationOptions, { name: 'enabled' })\n            enabledOption.setParameter(enabledOption.calculateValue(false))\n            this.fx = null\n        }\n    }\n}\n","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/audio-engine/fx/reverb.js",[],"/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/audio-engine/fx/autowah.js",[],"/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/audio-engine/fx/bitcrusher.js",[],"/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/audio-engine/fx/distortion.js",[],"/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/audio-engine/fx/highpass.js",[],"/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/audio-engine/fx/lowpass.js",[],"/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/audio-engine/fx/delay.js",[],"/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/audio-engine/instruments/TomToms.js",[],"/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/audio-engine/instruments/Rimshot.js",[],"/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/audio-engine/instruments/Maracas.js",[],"/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/audio-engine/instruments/Cymbal.js",[],"/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/audio-engine/instruments/Cowbell.js",[],"/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/audio-engine/instruments/Congas.js",[],"/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/audio-engine/instruments/Claves.js",[],"/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/audio-engine/instruments/Clap.js",[],"/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/audio-engine/instruments/SnareDrum.js",[],"/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/audio-engine/instruments/HitHatOpen.js",[],"/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/audio-engine/instruments/HiHatClosed.js",[],"/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/audio-engine/instruments/BassDrum.js",[],"/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/audio-engine/instruments/InstrumentBaseClass.js",[],"/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/audio-engine/fx/fx-base-class.js",[],"/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/samples/Bass Drum [BD]/index.js",["455"],"export default {\n    bdLong01: 'E808_BD[long]-01.wav',\n    bdLong02: 'E808_BD[long]-02.wav',\n    bdLong03: 'E808_BD[long]-03.wav',\n    bdLong04: 'E808_BD[long]-04.wav',\n    bdLong05: 'E808_BD[long]-05.wav',\n    bdLong06: 'E808_BD[long]-06.wav',\n    bdLong07: 'E808_BD[long]-07.wav',\n    bdLong08: 'E808_BD[long]-08.wav',\n    bdLong09: 'E808_BD[long]-09.wav',\n    bdLong10: 'E808_BD[long]-10.wav',\n    bdLong11: 'E808_BD[long]-11.wav',\n    bdLong12: 'E808_BD[long]-12.wav',\n    bdLong13: 'E808_BD[long]-13.wav',\n    bdLong14: 'E808_BD[long]-14.wav',\n    bdLong15: 'E808_BD[long]-15.wav',\n    bdLong16: 'E808_BD[long]-16.wav',\n    bdLong17: 'E808_BD[long]-17.wav',\n    bdShort01: 'E808_BD[short]-01.wav',\n    bdShort02: 'E808_BD[short]-02.wav',\n    bdShort03: 'E808_BD[short]-03.wav',\n    bdShort04: 'E808_BD[short]-04.wav',\n    bdShort05: 'E808_BD[short]-05.wav',\n    bdShort06: 'E808_BD[short]-06.wav',\n    bdShort07: 'E808_BD[short]-07.wav',\n    bdShort08: 'E808_BD[short]-08.wav',\n    bdShort09: 'E808_BD[short]-09.wav',\n    bdShort10: 'E808_BD[short]-10.wav',\n    bdShort11: 'E808_BD[short]-11.wav',\n    bdShort12: 'E808_BD[short]-12.wav'\n};","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/samples/Tom Toms [LT-MT-HT]/index.js",["456"],"export default {\n    ht01: 'E808_HT-01.wav',\n    ht02: 'E808_HT-02.wav',\n    ht03: 'E808_HT-03.wav',\n    ht04: 'E808_HT-04.wav',\n    ht05: 'E808_HT-05.wav',\n    ht06: 'E808_HT-06.wav',\n    ht07: 'E808_HT-07.wav',\n    ht08: 'E808_HT-08.wav',\n    ht09: 'E808_HT-09.wav',\n    ht10: 'E808_HT-10.wav',\n    ht11: 'E808_HT-11.wav',\n    ht12: 'E808_HT-12.wav',\n    lt01: 'E808_LT-01.wav',\n    lt02: 'E808_LT-02.wav',\n    lt03: 'E808_LT-03.wav',\n    lt04: 'E808_LT-04.wav',\n    lt05: 'E808_LT-05.wav',\n    lt06: 'E808_LT-06.wav',\n    lt07: 'E808_LT-07.wav',\n    lt08: 'E808_LT-08.wav',\n    lt09: 'E808_LT-09.wav',\n    lt10: 'E808_LT-10.wav',\n    lt11: 'E808_LT-11.wav',\n    lt12: 'E808_LT-12.wav',\n    mt01: 'E808_MT-01.wav',\n    mt02: 'E808_MT-02.wav',\n    mt03: 'E808_MT-03.wav',\n    mt04: 'E808_MT-04.wav',\n    mt05: 'E808_MT-05.wav',\n    mt06: 'E808_MT-06.wav',\n    mt07: 'E808_MT-07.wav',\n    mt08: 'E808_MT-08.wav',\n    mt09: 'E808_MT-09.wav',\n    mt10: 'E808_MT-10.wav',\n    mt11: 'E808_MT-11.wav',\n    mt12: 'E808_MT-12.wav'\n};","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/samples/Cymbal [CY]/index.js",["457"],"export default {\n    cy01: 'E808_CY-01.wav',\n    cy02: 'E808_CY-02.wav',\n    cy03: 'E808_CY-03.wav',\n    cy04: 'E808_CY-04.wav',\n    cy05: 'E808_CY-05.wav',\n    cy06: 'E808_CY-06.wav',\n    cy07: 'E808_CY-07.wav',\n    cy08: 'E808_CY-08.wav',\n    cy09: 'E808_CY-09.wav',\n    cy10: 'E808_CY-10.wav',\n    cy11: 'E808_CY-11.wav',\n    cy12: 'E808_CY-12.wav',\n    cy13: 'E808_CY-13.wav',\n    cy14: 'E808_CY-14.wav',\n    cy15: 'E808_CY-15.wav',\n    cy16: 'E808_CY-16.wav'\n};\n","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/samples/Hi Hat Closed [CH]/index.js",["458"],"export default {\n    ch01: 'E808_CH-01.wav',\n    ch02: 'E808_CH-02.wav',\n    ch03: 'E808_CH-03.wav',\n    ch04: 'E808_CH-04.wav',\n    ch05: 'E808_CH-05.wav',\n    ch06: 'E808_CH-06.wav',\n    ch07: 'E808_CH-07.wav',\n    ch08: 'E808_CH-08.wav',\n    ch09: 'E808_CH-09.wav',\n    ch10: 'E808_CH-10.wav',\n    ch11: 'E808_CH-11.wav',\n    ch12: 'E808_CH-12.wav'\n};\n","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/samples/Snare Drum [SD]/index.js",["459"],"export default {\n    sd01: 'E808_SD-01.wav',\n    sd02: 'E808_SD-02.wav',\n    sd03: 'E808_SD-03.wav',\n    sd04: 'E808_SD-04.wav',\n    sd05: 'E808_SD-05.wav',\n    sd06: 'E808_SD-06.wav',\n    sd07: 'E808_SD-07.wav',\n    sd08: 'E808_SD-08.wav',\n    sd09: 'E808_SD-09.wav',\n    sd10: 'E808_SD-10.wav',\n    sd11: 'E808_SD-11.wav',\n    sd12: 'E808_SD-12.wav',\n    sd13: 'E808_SD-13.wav',\n    sd14: 'E808_SD-14.wav',\n    sd15: 'E808_SD-15.wav',\n    sd16: 'E808_SD-16.wav',\n    sd17: 'E808_SD-17.wav',\n    sd18: 'E808_SD-18.wav',\n    sd19: 'E808_SD-19.wav',\n    sd20: 'E808_SD-20.wav'\n};\n","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/samples/Hi Hat Open [OH]/index.js",["460"],"export default {\n    oh01: 'E808_OH-01.wav',\n    oh02: 'E808_OH-02.wav',\n    oh03: 'E808_OH-03.wav',\n    oh04: 'E808_OH-04.wav',\n    oh05: 'E808_OH-05.wav',\n    oh06: 'E808_OH-06.wav',\n    oh07: 'E808_OH-07.wav',\n    oh08: 'E808_OH-08.wav',\n    oh09: 'E808_OH-09.wav',\n    oh10: 'E808_OH-10.wav',\n    oh11: 'E808_OH-11.wav',\n    oh12: 'E808_OH-12.wav',\n    oh13: 'E808_OH-13.wav'\n};\n","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/samples/Claves [CL]/index.js",["461"],"export default {\n    cl01: 'E808_CL-01.wav',\n    cl02: 'E808_CL-02.wav',\n    cl03: 'E808_CL-03.wav',\n    cl04: 'E808_CL-04.wav',\n    cl05: 'E808_CL-05.wav',\n    cl06: 'E808_CL-06.wav',\n    cl07: 'E808_CL-07.wav',\n    cl08: 'E808_CL-08.wav',\n    cl09: 'E808_CL-09.wav',\n    cl10: 'E808_CL-10.wav',\n    cl11: 'E808_CL-11.wav'\n};","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/samples/Clap [CP]/index.js",["462"],"export default {\n    cp01: 'E808_CP-01.wav',\n    cp02: 'E808_CP-02.wav',\n    cp03: 'E808_CP-03.wav',\n    cp04: 'E808_CP-04.wav',\n    cp05: 'E808_CP-05.wav',\n    cp06: 'E808_CP-06.wav',\n    cp07: 'E808_CP-07.wav',\n    cp08: 'E808_CP-08.wav',\n    cp09: 'E808_CP-09.wav',\n    cp10: 'E808_CP-10.wav',\n    cp11: 'E808_CP-11.wav',\n    cp12: 'E808_CP-12.wav',\n    cp13: 'E808_CP-13.wav',\n    cp14: 'E808_CP-14.wav',\n    cp15: 'E808_CP-15.wav',\n};","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/samples/Congas [HC-MC-LC]/index.js",["463"],"export default {\n    hc01: 'E808_HC-01.wav',\n    hc02: 'E808_HC-02.wav',\n    hc03: 'E808_HC-03.wav',\n    hc04: 'E808_HC-04.wav',\n    hc05: 'E808_HC-05.wav',\n    hc06: 'E808_HC-06.wav',\n    hc07: 'E808_HC-07.wav',\n    hc08: 'E808_HC-08.wav',\n    hc09: 'E808_HC-09.wav',\n    hc10: 'E808_HC-10.wav',\n    lc01: 'E808_LC-01.wav',\n    lc02: 'E808_LC-02.wav',\n    lc03: 'E808_LC-03.wav',\n    lc04: 'E808_LC-04.wav',\n    lc05: 'E808_LC-05.wav',\n    lc06: 'E808_LC-06.wav',\n    lc07: 'E808_LC-07.wav',\n    lc08: 'E808_LC-08.wav',\n    lc09: 'E808_LC-09.wav',\n    lc10: 'E808_LC-10.wav',\n    mc01: 'E808_MC-01.wav',\n    mc02: 'E808_MC-02.wav',\n    mc03: 'E808_MC-03.wav',\n    mc04: 'E808_MC-04.wav',\n    mc05: 'E808_MC-05.wav',\n    mc06: 'E808_MC-06.wav',\n    mc07: 'E808_MC-07.wav',\n    mc08: 'E808_MC-08.wav',\n    mc09: 'E808_MC-09.wav',\n    mc10: 'E808_MC-10.wav'\n};","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/samples/Cowbell [CB]/index.js",["464"],"export default {\n    cb01: 'E808_CB-01.wav',\n    cb02: 'E808_CB-02.wav',\n    cb03: 'E808_CB-03.wav',\n    cb04: 'E808_CB-04.wav',\n    cb05: 'E808_CB-05.wav',\n    cb06: 'E808_CB-06.wav',\n    cb07: 'E808_CB-07.wav',\n    cb08: 'E808_CB-08.wav',\n    cb09: 'E808_CB-09.wav',\n    cb10: 'E808_CB-10.wav',\n    cb11: 'E808_CB-11.wav',\n    cb12: 'E808_CB-12.wav',\n    cb13: 'E808_CB-13.wav',\n    cb14: 'E808_CB-14.wav',\n    cb15: 'E808_CB-15.wav'\n};\n","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/samples/Maracas [MA]/index.js",["465"],"export default {\n    ma01: 'E808_MA-01.wav',\n    ma02: 'E808_MA-02.wav',\n    ma03: 'E808_MA-03.wav',\n    ma04: 'E808_MA-04.wav',\n    ma05: 'E808_MA-05.wav',\n    ma06: 'E808_MA-06.wav',\n    ma07: 'E808_MA-07.wav',\n    ma08: 'E808_MA-08.wav',\n    ma09: 'E808_MA-09.wav',\n    ma10: 'E808_MA-10.wav',\n    ma11: 'E808_MA-11.wav'\n};\n","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/samples/Rimshot [RS]/index.js",["466"],"export default {\n    rs01: 'E808_RS-01.wav',\n    rs02: 'E808_RS-02.wav',\n    rs03: 'E808_RS-03.wav',\n    rs04: 'E808_RS-04.wav',\n    rs05: 'E808_RS-05.wav',\n    rs06: 'E808_RS-06.wav',\n    rs07: 'E808_RS-07.wav',\n    rs08: 'E808_RS-08.wav',\n    rs09: 'E808_RS-09.wav',\n    rs10: 'E808_RS-10.wav',\n    rs11: 'E808_RS-11.wav'\n};\n","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/components/header/SwingSlider.js",["467"],"import React, { useCallback, useContext } from 'react';\nimport { connect } from \"react-redux\";\nimport Slider from '@material-ui/core/Slider';\nimport { withStyles } from '@material-ui/core/styles';\nimport AudioEngine from '../../audio-engine/AudioEngine'\nimport { setRoundSwing } from '../../redux/actions';\nimport { FirebaseContext } from '../../firebase';\nimport _ from 'lodash'\nconst StyledSlider = withStyles({\n    root: {\n        color: '#ffffff',\n        width: 300\n    },\n    thumb: {\n        backgroundColor: '#fff',\n\n    },\n    active: {},\n    valueLabel: {\n\n    },\n    track: {\n\n    },\n    rail: {\n\n    },\n})(Slider);\nfunction SwingSlider ({ round, setRoundSwing }) {\n    const firebase = useContext(FirebaseContext);\n    const [value, setValue] = React.useState(round.swing);\n    const updateSwingState = (swing) => {\n        setRoundSwing(swing)\n        firebase.updateRound(round.id, { swing })\n    }\n    const updateSwingStateThrottled = useCallback(_.throttle(function (swing) {\n        updateSwingState(swing)\n    }, 2000), []);\n\n    const handleChange = (event, swing) => {\n        setValue(swing);\n        AudioEngine.setSwing(swing)\n        updateSwingStateThrottled(swing)\n    };\n\n    function valuetext (value) {\n        return `${value}%`;\n    }\n    return (\n        <div style={{ padding: '1rem', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n            <div style={{ marginRight: '1rem' }}>Swing</div>\n            <StyledSlider\n                value={value}\n                onChange={handleChange}\n                valueLabelFormat={valuetext}\n                valueLabelDisplay=\"on\"\n                aria-labelledby=\"continuous-slider\"\n                min={0}\n                max={100}\n            />\n        </div>\n    )\n}\nconst mapStateToProps = state => {\n    return {\n        round: state.round\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    {\n        setRoundSwing\n    }\n)(SwingSlider);","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/components/header/TempoSlider.js",["468"],"import React, { useCallback, useContext } from 'react';\nimport { connect } from \"react-redux\";\nimport Slider from '@material-ui/core/Slider';\nimport { withStyles } from '@material-ui/core/styles';\nimport AudioEngine from '../../audio-engine/AudioEngine'\nimport { setRoundBpm } from '../../redux/actions';\nimport { FirebaseContext } from '../../firebase';\nimport _ from 'lodash'\nconst StyledSlider = withStyles({\n    root: {\n        color: '#ffffff',\n        width: 300\n    },\n    thumb: {\n        backgroundColor: '#fff',\n\n    },\n    active: {},\n    valueLabel: {\n\n    },\n    track: {\n\n    },\n    rail: {\n\n    },\n})(Slider);\nfunction TempoSlider ({ round, setRoundBpm }) {\n    const firebase = useContext(FirebaseContext);\n    const [value, setValue] = React.useState(round.bpm);\n    const updateTempoState = (bpm) => {\n        setRoundBpm(bpm)\n        firebase.updateRound(round.id, { bpm })\n    }\n    const updateTempoStateThrottled = useCallback(_.throttle(function (bpm) {\n        updateTempoState(bpm)\n    }, 2000), []);\n\n    const handleChange = (event, bpm) => {\n        setValue(bpm);\n        AudioEngine.setTempo(bpm)\n        updateTempoStateThrottled(bpm)\n    };\n\n    function valuetext (value) {\n        return `${value}`;\n    }\n    return (\n        <div style={{ padding: '1rem', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n            <div style={{ marginRight: '1rem' }}>Tempo</div>\n            <StyledSlider\n                value={value}\n                onChange={handleChange}\n                valueLabelFormat={valuetext}\n                valueLabelDisplay=\"on\"\n                aria-labelledby=\"continuous-slider\"\n                min={50}\n                max={200}\n            />\n        </div>\n    )\n}\nconst mapStateToProps = state => {\n    return {\n        round: state.round\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    {\n        setRoundBpm\n    }\n)(TempoSlider);","/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/redux/reducers/display.js",[],"/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/redux/reducers/users.js",[],"/Users/simonadcock/Desktop/contract-work/roundaround/roundaround/src/redux/reducers/user.js",[],{"ruleId":"469","replacedBy":"470"},{"ruleId":"471","replacedBy":"472"},{"ruleId":"473","severity":1,"message":"474","line":1,"column":17,"nodeType":"475","messageId":"476","endLine":1,"endColumn":26},{"ruleId":"473","severity":1,"message":"477","line":20,"column":8,"nodeType":"475","messageId":"476","endLine":20,"endColumn":9},{"ruleId":"473","severity":1,"message":"478","line":27,"column":9,"nodeType":"475","messageId":"476","endLine":27,"endColumn":24},{"ruleId":"473","severity":1,"message":"479","line":28,"column":9,"nodeType":"475","messageId":"476","endLine":28,"endColumn":16},{"ruleId":"473","severity":1,"message":"480","line":4,"column":8,"nodeType":"475","messageId":"476","endLine":4,"endColumn":17},{"ruleId":"473","severity":1,"message":"481","line":9,"column":8,"nodeType":"475","messageId":"476","endLine":9,"endColumn":20},{"ruleId":"473","severity":1,"message":"482","line":10,"column":8,"nodeType":"475","messageId":"476","endLine":10,"endColumn":20},{"ruleId":"473","severity":1,"message":"483","line":19,"column":5,"nodeType":"475","messageId":"476","endLine":19,"endColumn":9},{"ruleId":"473","severity":1,"message":"484","line":64,"column":12,"nodeType":"475","messageId":"476","endLine":64,"endColumn":24},{"ruleId":"473","severity":1,"message":"485","line":70,"column":11,"nodeType":"475","messageId":"476","endLine":70,"endColumn":27},{"ruleId":"473","severity":1,"message":"486","line":74,"column":11,"nodeType":"475","messageId":"476","endLine":74,"endColumn":28},{"ruleId":"487","severity":1,"message":"488","line":106,"column":8,"nodeType":"489","endLine":106,"endColumn":10,"suggestions":"490"},{"ruleId":"473","severity":1,"message":"474","line":1,"column":27,"nodeType":"475","messageId":"476","endLine":1,"endColumn":36},{"ruleId":"487","severity":1,"message":"491","line":39,"column":8,"nodeType":"489","endLine":39,"endColumn":31,"suggestions":"492"},{"ruleId":"473","severity":1,"message":"493","line":1,"column":29,"nodeType":"475","messageId":"476","endLine":1,"endColumn":35},{"ruleId":"473","severity":1,"message":"494","line":3,"column":8,"nodeType":"475","messageId":"476","endLine":3,"endColumn":17},{"ruleId":"473","severity":1,"message":"495","line":7,"column":8,"nodeType":"475","messageId":"476","endLine":7,"endColumn":25},{"ruleId":"473","severity":1,"message":"496","line":14,"column":8,"nodeType":"475","messageId":"476","endLine":14,"endColumn":22},{"ruleId":"473","severity":1,"message":"482","line":15,"column":8,"nodeType":"475","messageId":"476","endLine":15,"endColumn":20},{"ruleId":"473","severity":1,"message":"477","line":4,"column":8,"nodeType":"475","messageId":"476","endLine":4,"endColumn":9},{"ruleId":"473","severity":1,"message":"497","line":1,"column":28,"nodeType":"475","messageId":"476","endLine":1,"endColumn":38},{"ruleId":"498","severity":1,"message":"499","line":515,"column":47,"nodeType":"500","messageId":"501","endLine":515,"endColumn":49},{"ruleId":"473","severity":1,"message":"502","line":83,"column":7,"nodeType":"475","messageId":"476","endLine":83,"endColumn":19},{"ruleId":"473","severity":1,"message":"503","line":89,"column":7,"nodeType":"475","messageId":"476","endLine":89,"endColumn":24},{"ruleId":"473","severity":1,"message":"504","line":43,"column":18,"nodeType":"475","messageId":"476","endLine":43,"endColumn":25},{"ruleId":"473","severity":1,"message":"505","line":44,"column":11,"nodeType":"475","messageId":"476","endLine":44,"endColumn":19},{"ruleId":"473","severity":1,"message":"479","line":46,"column":11,"nodeType":"475","messageId":"476","endLine":46,"endColumn":18},{"ruleId":"487","severity":1,"message":"506","line":53,"column":8,"nodeType":"489","endLine":53,"endColumn":30,"suggestions":"507"},{"ruleId":"473","severity":1,"message":"508","line":111,"column":11,"nodeType":"475","messageId":"476","endLine":111,"endColumn":20},{"ruleId":"498","severity":1,"message":"499","line":41,"column":28,"nodeType":"500","messageId":"501","endLine":41,"endColumn":30},{"ruleId":"498","severity":1,"message":"499","line":81,"column":30,"nodeType":"500","messageId":"501","endLine":81,"endColumn":32},{"ruleId":"509","severity":1,"message":"510","line":11,"column":49,"nodeType":"511","messageId":"512","endLine":11,"endColumn":51},{"ruleId":"513","severity":1,"message":"514","line":11,"column":65,"nodeType":"511","messageId":"515","endLine":11,"endColumn":66},{"ruleId":"513","severity":1,"message":"514","line":11,"column":71,"nodeType":"511","messageId":"515","endLine":11,"endColumn":72},{"ruleId":"498","severity":1,"message":"499","line":56,"column":26,"nodeType":"500","messageId":"501","endLine":56,"endColumn":28},{"ruleId":"473","severity":1,"message":"493","line":1,"column":17,"nodeType":"475","messageId":"476","endLine":1,"endColumn":23},{"ruleId":"473","severity":1,"message":"516","line":1,"column":25,"nodeType":"475","messageId":"476","endLine":1,"endColumn":33},{"ruleId":"473","severity":1,"message":"517","line":2,"column":19,"nodeType":"475","messageId":"476","endLine":2,"endColumn":36},{"ruleId":"473","severity":1,"message":"518","line":2,"column":38,"nodeType":"475","messageId":"476","endLine":2,"endColumn":46},{"ruleId":"473","severity":1,"message":"519","line":2,"column":48,"nodeType":"475","messageId":"476","endLine":2,"endColumn":59},{"ruleId":"473","severity":1,"message":"520","line":6,"column":10,"nodeType":"475","messageId":"476","endLine":6,"endColumn":24},{"ruleId":"473","severity":1,"message":"521","line":6,"column":42,"nodeType":"475","messageId":"476","endLine":6,"endColumn":59},{"ruleId":"473","severity":1,"message":"522","line":13,"column":8,"nodeType":"475","messageId":"476","endLine":13,"endColumn":17},{"ruleId":"523","severity":1,"message":"524","line":36,"column":5,"nodeType":"525","messageId":"526","endLine":38,"endColumn":6},{"ruleId":"473","severity":1,"message":"527","line":73,"column":13,"nodeType":"475","messageId":"476","endLine":73,"endColumn":31},{"ruleId":"473","severity":1,"message":"528","line":76,"column":27,"nodeType":"475","messageId":"476","endLine":76,"endColumn":31},{"ruleId":"473","severity":1,"message":"516","line":1,"column":17,"nodeType":"475","messageId":"476","endLine":1,"endColumn":25},{"ruleId":"473","severity":1,"message":"529","line":1,"column":27,"nodeType":"475","messageId":"476","endLine":1,"endColumn":38},{"ruleId":"487","severity":1,"message":"530","line":57,"column":8,"nodeType":"489","endLine":57,"endColumn":26,"suggestions":"531"},{"ruleId":"473","severity":1,"message":"516","line":1,"column":17,"nodeType":"475","messageId":"476","endLine":1,"endColumn":25},{"ruleId":"473","severity":1,"message":"529","line":1,"column":27,"nodeType":"475","messageId":"476","endLine":1,"endColumn":38},{"ruleId":"473","severity":1,"message":"532","line":3,"column":8,"nodeType":"475","messageId":"476","endLine":3,"endColumn":19},{"ruleId":"473","severity":1,"message":"533","line":11,"column":10,"nodeType":"475","messageId":"476","endLine":11,"endColumn":27},{"ruleId":"487","severity":1,"message":"534","line":56,"column":8,"nodeType":"489","endLine":56,"endColumn":26,"suggestions":"535"},{"ruleId":"473","severity":1,"message":"516","line":1,"column":17,"nodeType":"475","messageId":"476","endLine":1,"endColumn":25},{"ruleId":"473","severity":1,"message":"529","line":1,"column":27,"nodeType":"475","messageId":"476","endLine":1,"endColumn":38},{"ruleId":"473","severity":1,"message":"532","line":3,"column":8,"nodeType":"475","messageId":"476","endLine":3,"endColumn":19},{"ruleId":"473","severity":1,"message":"536","line":12,"column":8,"nodeType":"475","messageId":"476","endLine":12,"endColumn":19},{"ruleId":"487","severity":1,"message":"537","line":44,"column":8,"nodeType":"489","endLine":44,"endColumn":26,"suggestions":"538"},{"ruleId":"473","severity":1,"message":"516","line":1,"column":17,"nodeType":"475","messageId":"476","endLine":1,"endColumn":25},{"ruleId":"473","severity":1,"message":"529","line":1,"column":27,"nodeType":"475","messageId":"476","endLine":1,"endColumn":38},{"ruleId":"487","severity":1,"message":"539","line":52,"column":8,"nodeType":"489","endLine":52,"endColumn":26,"suggestions":"540"},{"ruleId":"473","severity":1,"message":"541","line":4,"column":10,"nodeType":"475","messageId":"476","endLine":4,"endColumn":17},{"ruleId":"473","severity":1,"message":"517","line":4,"column":19,"nodeType":"475","messageId":"476","endLine":4,"endColumn":36},{"ruleId":"473","severity":1,"message":"518","line":4,"column":38,"nodeType":"475","messageId":"476","endLine":4,"endColumn":46},{"ruleId":"487","severity":1,"message":"542","line":13,"column":43,"nodeType":"475","endLine":13,"endColumn":54},{"ruleId":"487","severity":1,"message":"543","line":30,"column":8,"nodeType":"489","endLine":30,"endColumn":26,"suggestions":"544"},{"ruleId":"473","severity":1,"message":"541","line":2,"column":10,"nodeType":"475","messageId":"476","endLine":2,"endColumn":17},{"ruleId":"473","severity":1,"message":"517","line":2,"column":19,"nodeType":"475","messageId":"476","endLine":2,"endColumn":36},{"ruleId":"473","severity":1,"message":"518","line":2,"column":38,"nodeType":"475","messageId":"476","endLine":2,"endColumn":46},{"ruleId":"473","severity":1,"message":"545","line":7,"column":10,"nodeType":"475","messageId":"476","endLine":7,"endColumn":31},{"ruleId":"487","severity":1,"message":"542","line":28,"column":40,"nodeType":"475","endLine":28,"endColumn":51},{"ruleId":"487","severity":1,"message":"546","line":41,"column":8,"nodeType":"489","endLine":41,"endColumn":26,"suggestions":"547"},{"ruleId":"473","severity":1,"message":"477","line":2,"column":13,"nodeType":"475","messageId":"476","endLine":2,"endColumn":14},{"ruleId":"473","severity":1,"message":"548","line":86,"column":15,"nodeType":"475","messageId":"476","endLine":86,"endColumn":20},{"ruleId":"473","severity":1,"message":"548","line":70,"column":15,"nodeType":"475","messageId":"476","endLine":70,"endColumn":20},{"ruleId":"473","severity":1,"message":"549","line":65,"column":19,"nodeType":"475","messageId":"476","endLine":65,"endColumn":22},{"ruleId":"473","severity":1,"message":"550","line":5,"column":7,"nodeType":"475","messageId":"476","endLine":5,"endColumn":11},{"ruleId":"551","severity":1,"message":"552","line":1,"column":1,"nodeType":"553","endLine":31,"endColumn":3},{"ruleId":"551","severity":1,"message":"552","line":1,"column":1,"nodeType":"553","endLine":38,"endColumn":3},{"ruleId":"551","severity":1,"message":"552","line":1,"column":1,"nodeType":"553","endLine":18,"endColumn":3},{"ruleId":"551","severity":1,"message":"552","line":1,"column":1,"nodeType":"553","endLine":14,"endColumn":3},{"ruleId":"551","severity":1,"message":"552","line":1,"column":1,"nodeType":"553","endLine":22,"endColumn":3},{"ruleId":"551","severity":1,"message":"552","line":1,"column":1,"nodeType":"553","endLine":15,"endColumn":3},{"ruleId":"551","severity":1,"message":"552","line":1,"column":1,"nodeType":"553","endLine":13,"endColumn":3},{"ruleId":"551","severity":1,"message":"552","line":1,"column":1,"nodeType":"553","endLine":17,"endColumn":3},{"ruleId":"551","severity":1,"message":"552","line":1,"column":1,"nodeType":"553","endLine":32,"endColumn":3},{"ruleId":"551","severity":1,"message":"552","line":1,"column":1,"nodeType":"553","endLine":17,"endColumn":3},{"ruleId":"551","severity":1,"message":"552","line":1,"column":1,"nodeType":"553","endLine":13,"endColumn":3},{"ruleId":"551","severity":1,"message":"552","line":1,"column":1,"nodeType":"553","endLine":13,"endColumn":3},{"ruleId":"487","severity":1,"message":"542","line":36,"column":39,"nodeType":"475","endLine":36,"endColumn":50},{"ruleId":"487","severity":1,"message":"542","line":36,"column":39,"nodeType":"475","endLine":36,"endColumn":50},"no-native-reassign",["554"],"no-negated-in-lhs",["555"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'_' is defined but never used.","'firebaseContext' is assigned a value but never used.","'history' is assigned a value but never used.","'PropTypes' is defined but never used.","'SignInDialog' is defined but never used.","'ListItemIcon' is defined but never used.","'Link' is defined but never used.","'isUsingJitsi' is assigned a value but never used.","'onJoinJitsiClick' is assigned a value but never used.","'onLeaveJitsiClick' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'firebaseContext', 'location.pathname', 'setIsShowingSignInDialog', 'setRounds', and 'setUser'. Either include them or remove the dependency array. If 'setUser' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["556"],"React Hook useEffect has a missing dependency: 'setDisableKeyListener'. Either include it or remove the dependency array. If 'setDisableKeyListener' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["557"],"'useRef' is defined but never used.","'TextField' is defined but never used.","'DialogContentText' is defined but never used.","'FullscreenIcon' is defined but never used.","'useContext' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'SortableItem' is assigned a value but never used.","'SortableContainer' is assigned a value but never used.","'setLink' is assigned a value but never used.","'QRCanvas' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'draw'. Either include it or remove the dependency array.",["558"],"'onGoClick' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-mixed-operators","Unexpected mix of '&' and '|'.","unexpectedMixedOperator","'useState' is defined but never used.","'ReactReduxContext' is defined but never used.","'Provider' is defined but never used.","'useDispatch' is defined but never used.","'SET_LAYER_NAME' is defined but never used.","'SET_LAYER_PREVIEW' is defined but never used.","'LayerName' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'layerVolumePercent' is assigned a value but never used.","'fxId' is assigned a value but never used.","'useCallback' is defined but never used.","React Hook useEffect has missing dependencies: 'defaultSelectedFx' and 'selectedLayer.automationFxId'. Either include them or remove the dependency array. If 'setSelectedFX' needs the current value of 'selectedLayer.automationFxId', you can also switch to useReducer instead of useState and read 'selectedLayer.automationFxId' in the reducer.",["559"],"'Instruments' is defined but never used.","'changeLayerLength' is defined but never used.","React Hook useEffect has a missing dependency: 'selectedLayer.type'. Either include it or remove the dependency array. If 'setSelectedType' needs the current value of 'selectedLayer.type', you can also switch to useReducer instead of useState and read 'selectedLayer.type' in the reducer.",["560"],"'AudioEngine' is defined but never used.","React Hook useEffect has a missing dependency: 'selectedLayer.steps.length'. Either include it or remove the dependency array. If 'setSelectedNumberOfSteps' needs the current value of 'selectedLayer.steps.length', you can also switch to useReducer instead of useState and read 'selectedLayer.steps.length' in the reducer.",["561"],"React Hook useEffect has missing dependencies: 'selectedLayer.instrument.sample' and 'selectedLayer.instrument.sampler'. Either include them or remove the dependency array. If 'setSelectedInstrument' needs the current value of 'selectedLayer.instrument.sampler', you can also switch to useReducer instead of useState and read 'selectedLayer.instrument.sampler' in the reducer.",["562"],"'connect' is defined but never used.","React Hook useCallback received a function whose dependencies are unknown. Pass an inline function instead.","React Hook useEffect has a missing dependency: 'selectedLayer.name'. Either include it or remove the dependency array. If 'setTextValue' needs the current value of 'selectedLayer.name', you can also switch to useReducer instead of useState and read 'selectedLayer.name' in the reducer.",["563"],"'updateLayerInstrument' is defined but never used.","React Hook useEffect has a missing dependency: 'selectedLayer.gain'. Either include it or remove the dependency array. If 'setSliderValue' needs the current value of 'selectedLayer.gain', you can also switch to useReducer instead of useState and read 'selectedLayer.gain' in the reducer.",["564"],"'_this' is assigned a value but never used.","'key' is assigned a value but never used.","'Note' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation",{"desc":"565","fix":"566"},{"desc":"567","fix":"568"},{"desc":"569","fix":"570"},{"desc":"571","fix":"572"},{"desc":"573","fix":"574"},{"desc":"575","fix":"576"},{"desc":"577","fix":"578"},{"desc":"579","fix":"580"},{"desc":"581","fix":"582"},"Update the dependencies array to be: [firebaseContext, location.pathname, setIsShowingSignInDialog, setRounds, setUser]",{"range":"583","text":"584"},"Update the dependencies array to be: [isShowingRenameDialog, setDisableKeyListener]",{"range":"585","text":"586"},"Update the dependencies array to be: [draw, isShowingShareDialog]",{"range":"587","text":"588"},"Update the dependencies array to be: [defaultSelectedFx, selectedLayer.automationFxId, selectedLayer.id]",{"range":"589","text":"590"},"Update the dependencies array to be: [selectedLayer.id, selectedLayer.type]",{"range":"591","text":"592"},"Update the dependencies array to be: [selectedLayer.id, selectedLayer.steps.length]",{"range":"593","text":"594"},"Update the dependencies array to be: [selectedLayer.id, selectedLayer.instrument.sample, selectedLayer.instrument.sampler]",{"range":"595","text":"596"},"Update the dependencies array to be: [selectedLayer.id, selectedLayer.name]",{"range":"597","text":"598"},"Update the dependencies array to be: [selectedLayer.gain, selectedLayer.id]",{"range":"599","text":"600"},[3529,3531],"[firebaseContext, location.pathname, setIsShowingSignInDialog, setRounds, setUser]",[1669,1692],"[isShowingRenameDialog, setDisableKeyListener]",[1634,1656],"[draw, isShowingShareDialog]",[2841,2859],"[defaultSelectedFx, selectedLayer.automationFxId, selectedLayer.id]",[2813,2831],"[selectedLayer.id, selectedLayer.type]",[1986,2004],"[selectedLayer.id, selectedLayer.steps.length]",[2951,2969],"[selectedLayer.id, selectedLayer.instrument.sample, selectedLayer.instrument.sampler]",[1363,1381],"[selectedLayer.id, selectedLayer.name]",[1770,1788],"[selectedLayer.gain, selectedLayer.id]"]