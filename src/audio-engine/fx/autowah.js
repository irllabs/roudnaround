import FXBaseClass from './fx-base-class';
import _ from 'lodash';
import * as Tone from 'tone';

export default class Autowah extends FXBaseClass {
    static fxName = 'autowah';
    static icon =
        `<svg width="32" height="32" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
            <rect x="0.000488281" width="32.0004" height="32" rx="16" fill="white" fill-opacity="0.1"/>
            <path fill-rule="evenodd" clip-rule="evenodd" d="M14.3234 20.6594C14.6428 21.0494 15.0897 21.3333 15.6673 21.3333C16.7309 21.3333 17.3596 20.5446 17.7445 19.7634C18.1288 18.9834 18.3929 17.9712 18.6341 17.0462L18.6458 17.0016C18.9013 16.0219 19.1351 15.1376 19.4529 14.4926C19.7763 13.8362 20.0643 13.6667 20.3341 13.6667C20.7022 13.6667 21.0007 13.3682 21.0007 13C21.0007 12.6318 20.7022 12.3333 20.3341 12.3333C19.2705 12.3333 18.6417 13.1221 18.2568 13.9032C17.8725 14.6832 17.6085 15.6955 17.3672 16.6205L17.3556 16.6651C17.1 17.6448 16.8663 18.5291 16.5485 19.1741C16.225 19.8305 15.9371 20 15.6673 20C15.5782 20 15.4834 19.9714 15.3549 19.8146C15.2104 19.6381 15.0645 19.3421 14.9288 18.9061C14.6576 18.0344 14.4974 16.8482 14.3281 15.5786L14.3224 15.5358C14.16 14.3179 13.9873 13.0228 13.6788 12.0311C13.5228 11.5296 13.3145 11.0444 13.0111 10.6739C12.6916 10.2839 12.2448 10 11.6672 10C10.7619 10 10.0695 10.4345 9.5696 11.0113C9.08218 11.5737 8.75616 12.2914 8.53466 12.9558C8.31067 13.6278 8.17849 14.292 8.10211 14.7829C8.06371 15.0298 8.0389 15.2363 8.0236 15.3824C8.01594 15.4555 8.01064 15.5136 8.0072 15.5544C8.00548 15.5748 8.00422 15.5909 8.00336 15.6023L8.00236 15.6159L8.00207 15.62L8.00198 15.6214L8.00192 15.6223C7.97742 15.9897 8.25539 16.3074 8.62278 16.3319C8.99005 16.3563 9.30764 16.0786 9.33231 15.7113M9.33231 15.7113C9.33289 15.6939 9.3338 15.6667 9.3338 15.6667L9.33584 15.6666C9.33858 15.6341 9.34304 15.5849 9.34971 15.5213C9.36305 15.3939 9.38512 15.2097 9.41963 14.9879C9.48909 14.5414 9.60692 13.9555 9.7996 13.3775C9.99478 12.792 10.2521 12.2596 10.5772 11.8845C10.8899 11.5238 11.2391 11.3333 11.6672 11.3333C11.7563 11.3333 11.8511 11.3619 11.9796 11.5188C12.1241 11.6952 12.27 11.9912 12.4056 12.4272C12.6768 13.2989 12.8371 14.4851 13.0064 15.7548L13.0121 15.7975C13.1745 17.0155 13.3703 18.3416 13.6788 19.3333C13.8348 19.8348 14.0199 20.289 14.3234 20.6594" fill="white" fill-opacity="0.9"/>
            <path opacity="0.5" fill-rule="evenodd" clip-rule="evenodd" d="M16.7434 19.1969C17.0809 19.4976 17.5045 19.6666 18.0007 19.6666C18.9445 19.6666 19.5834 19.1721 20.0264 18.5557C20.4136 18.0171 20.6928 17.3268 20.9379 16.7212C20.9566 16.675 20.9751 16.6293 20.9934 16.5842C21.2704 15.9023 21.5189 15.3286 21.8489 14.917C22.1502 14.5414 22.4922 14.3333 23.0008 14.3333C23.369 14.3333 23.6675 14.0348 23.6675 13.6666C23.6675 13.2984 23.369 12.9999 23.0008 12.9999C22.0093 12.9999 21.3097 13.4584 20.8088 14.0828C20.3368 14.6713 20.0228 15.4308 19.7581 16.0823C19.7467 16.1103 19.7354 16.1381 19.7242 16.1657C19.4565 16.8253 19.2337 17.374 18.9437 17.7775C18.668 18.1611 18.3902 18.3333 18.0007 18.3333C17.8302 18.3333 17.7225 18.2835 17.6303 18.2014C17.5221 18.1049 17.4068 17.936 17.2974 17.6603C17.0724 17.0933 16.9561 16.3069 16.8273 15.4056C16.8248 15.3884 16.8224 15.3711 16.8199 15.3537C16.7005 14.5178 16.5664 13.5781 16.2766 12.8478C16.1256 12.4673 15.9127 12.0893 15.5912 11.8029C15.2537 11.5023 14.8301 11.3333 14.3339 11.3333C13.4973 11.3333 12.8373 11.6271 12.3417 12.0814C11.8607 12.5223 11.5623 13.0875 11.374 13.6054C11.1844 14.1267 11.0925 14.6385 11.047 15.0134C11.0241 15.2026 11.0125 15.3613 11.0066 15.4744C11.0037 15.5311 11.0022 15.5767 11.0014 15.6093C11.001 15.6255 11.0008 15.6386 11.0007 15.6482L11.0005 15.6601L11.0005 15.664L11.0005 15.6655L11.0005 15.6666C11.0005 16.0348 11.299 16.3333 11.6672 16.3333C12.035 16.3333 12.3333 16.0354 12.3339 15.6677L12.3339 15.667L12.3339 15.6639L12.3343 15.6416C12.3349 15.6204 12.3359 15.5872 12.3382 15.5436C12.3427 15.4563 12.352 15.3284 12.3707 15.1739C12.4086 14.8613 12.4833 14.4565 12.6271 14.0611C12.7721 13.6623 12.9737 13.3109 13.2427 13.0643C13.4972 12.8311 13.8372 12.6666 14.3339 12.6666C14.5045 12.6666 14.6121 12.7163 14.7043 12.7985C14.8125 12.8949 14.9278 13.0638 15.0372 13.3396C15.2622 13.9065 15.3786 14.6929 15.5073 15.5942C15.5098 15.6115 15.5123 15.6288 15.5147 15.6461C15.6341 16.482 15.7682 17.4217 16.0581 18.1521C16.2091 18.5326 16.4219 18.9105 16.7434 19.1969Z" fill="white" fill-opacity="0.9"/>
        </svg>`

    constructor(fxParameters) {
        super(fxParameters)
        this._q = 4
        this._mix = 1
        this._mixBeforeBypass = this._mix
        this.label = 'Autowah'
        this.isOn = fxParameters.isOn
    }

    setQ(value, time) {
        this._q = value
        if (this.isOn) {
            this.fx.Q = value
        }
    }
    setMix(value, time) {
        this._mix = value
        if (this.isOn) {
            if (!_.isNil(time)) {
                this.fx.wet.setValueAtTime(value, time)
            } else {
                this.fx.wet.value = value
            }
        }
    }
    setBypass(value, time) {
        if (value === true && !this._override) {
            // set mix to 0 rather than turn off so that we can do this rapidly without needing to rebuild the audio chain
            if (this._mix > 0) {
                this._mixBeforeBypass = this._mix
            }
            this.setMix(0, time)
        } else {
            this.setMix(this._mixBeforeBypass, time)
        }
    }


    enable() {
        this.fx = new Tone.AutoWah(50, 6, -30)
        this.fx.wet.value = this._mix
        this.setBypass(true)
    }

    getAutomationOptions() {
        return [
            {
                label: 'Enabled',
                name: 'enabled',
                setParameter: this.setBypass.bind(this),
                calculateValue: function (value) {
                    return value === false ? true : false
                }
            }
        ]
    }
}
