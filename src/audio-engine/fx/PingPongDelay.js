
import FXBaseClass from './fx-base-class';
import _ from 'lodash';
import * as Tone from 'tone';

export default class PingPongDelay extends FXBaseClass {
    static fxName = 'pingpong';
    // static icon = '<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M11.5 20C10.6337 20 9.96341 19.5742 9.48421 18.9891C9.02909 18.4334 8.71671 17.7056 8.48267 16.9533C8.15321 15.8943 7.92705 14.6048 7.73621 13.2905C7.65897 12.7586 7.58752 12.2226 7.51735 11.6962L7.5088 11.6322C7.31298 10.1635 7.12519 8.76919 6.86294 7.60834C6.80525 7.75789 6.75052 7.91081 6.69872 8.06623C6.40971 8.93327 6.23296 9.81207 6.12878 10.4818C6.07701 10.8146 6.04391 11.0909 6.02389 11.2819C6.0139 11.3773 6.0072 11.4512 6.00308 11.4999L5.99877 11.5535L5.99791 11.5653L5.99779 11.567C5.9608 12.1178 5.48442 12.5345 4.93352 12.4978C4.38246 12.461 3.96552 11.9845 4.00225 11.4335L4.00235 11.4321C4.00235 11.4321 4.00003 11.43 4.00249 11.43L4.00292 11.4238L4.00442 11.4034C4.00571 11.3863 4.00759 11.3622 4.01018 11.3316C4.01534 11.2705 4.02329 11.1832 4.03478 11.0735C4.05773 10.8544 4.09494 10.5448 4.15255 10.1744C4.26711 9.43793 4.46537 8.44173 4.80135 7.43377C5.05331 6.6779 5.39544 5.87612 5.86494 5.16485C5.72271 5.0283 5.60853 5 5.50003 5C4.85798 5 4.33406 5.28569 3.8651 5.82681C3.37746 6.38947 2.99148 7.18794 2.69872 8.06623C2.40971 8.93327 2.23296 9.81207 2.12878 10.4818C2.07701 10.8146 2.04391 11.0909 2.02389 11.2819C2.0139 11.3773 2.0072 11.4512 2.00308 11.4999L1.99877 11.5535L1.99791 11.5653L1.99779 11.567C1.9608 12.1178 1.48442 12.5345 0.93352 12.4978C0.382458 12.461 -0.0344846 11.9845 0.00225283 11.4335L0.00248743 11.43L0.0029204 11.4238L0.00441576 11.4034C0.00570513 11.3863 0.00759341 11.3622 0.010176 11.3316C0.0153411 11.2705 0.0232909 11.1832 0.0347769 11.0735C0.0577319 10.8544 0.0949366 10.5448 0.152546 10.1744C0.267111 9.43793 0.465367 8.44173 0.801352 7.43377C1.13359 6.43706 1.62261 5.36053 2.35372 4.51695C3.1035 3.65181 4.14208 3 5.50003 3C6.21067 3 6.78936 3.2865 7.23889 3.71238C7.86197 3.27822 8.61284 3 9.50003 3C10.3664 3 11.0366 3.42583 11.5158 4.01089C11.971 4.56656 12.2833 5.29441 12.5174 6.04668C12.9802 7.53427 13.2392 9.4768 13.4827 11.3038L13.4913 11.3678C13.5656 11.9253 13.6388 12.472 13.7153 12.9994C13.8175 12.5285 13.9184 12.0424 14.0208 11.5474L14.0335 11.4857C14.3989 9.71937 14.7877 7.84008 15.3499 6.40163C15.6348 5.6726 15.9938 4.97545 16.4776 4.44749C16.9813 3.89776 17.6545 3.5 18.5 3.5C19.0523 3.5 19.5 3.94772 19.5 4.5C19.5 5.05228 19.0523 5.5 18.5 5.5C18.3456 5.5 18.1751 5.55536 17.9522 5.79861C17.7094 6.06362 17.459 6.49928 17.2127 7.12962C16.7189 8.39317 16.3601 10.1118 15.9793 11.9526L15.9665 12.0143C15.6027 13.7727 15.2158 15.6431 14.6577 17.0791C14.7808 17.3569 14.9065 17.5692 15.0315 17.7218C15.2241 17.9571 15.3664 18 15.5 18C15.6545 18 15.825 17.9446 16.0479 17.7014C16.2907 17.4364 16.541 17.0007 16.7874 16.3704C17.2812 15.1068 17.6399 13.3882 18.0208 11.5474L18.0335 11.4857C18.3989 9.71937 18.7877 7.84008 19.3499 6.40163C19.6348 5.6726 19.9938 4.97545 20.4776 4.44749C20.9813 3.89776 21.6545 3.5 22.5 3.5C23.0523 3.5 23.5 3.94772 23.5 4.5C23.5 5.05228 23.0523 5.5 22.5 5.5C22.3456 5.5 22.1751 5.55536 21.9522 5.79861C21.7094 6.06362 21.459 6.49928 21.2127 7.12962C20.7189 8.39317 20.3601 10.1118 19.9793 11.9526L19.9665 12.0143C19.6011 13.7806 19.2123 15.6599 18.6502 17.0984C18.3653 17.8274 18.0062 18.5246 17.5225 19.0525C17.0188 19.6022 16.3456 20 15.5 20C14.661 20 14.006 19.6007 13.5302 19.0441C13.5276 19.0469 13.5251 19.0497 13.5225 19.0525C13.0188 19.6022 12.3456 20 11.5 20ZM12.5016 17.0135C12.3709 17.2689 12.2403 17.4726 12.1115 17.6282C12.0903 17.6539 12.069 17.6783 12.0479 17.7014C11.825 17.9446 11.6545 18 11.5 18C11.3664 18 11.2241 17.9571 11.0315 17.7218C10.8147 17.4572 10.5958 17.0132 10.3924 16.3592C10.333 16.1682 10.2771 15.9672 10.2242 15.7571C9.91509 14.5292 9.7081 12.9942 9.49126 11.3678L9.48272 11.3038C9.23916 9.4768 8.98019 7.53427 8.51739 6.04668C8.45086 5.83283 8.37799 5.62096 8.29732 5.41445C8.65435 5.14167 9.0479 5 9.50003 5C9.63366 5 9.77591 5.04292 9.96859 5.27817C10.1853 5.54281 10.4042 5.98684 10.6077 6.64082C11.0145 7.94833 11.2549 9.72768 11.5088 11.6322L11.5173 11.6962L11.5174 11.6963C11.7609 13.5232 12.0199 15.4657 12.4827 16.9533C12.4889 16.9734 12.4952 16.9935 12.5016 17.0135Z" fill="currentColor"/></svg>'
    static icon = '<svg version="1.2" baseProfile="tiny-ps" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 17" width="24" height="17"><title>Layer</title><style>tspan { white-space:pre }	.shp0 { fill: #ffffff } .shp1 { opacity: 0.502;fill: #ffffff } </style>	<path id="Layer" fill-rule="evenodd" class="shp0" d="M9.96 16.03C10.47 16.59 11.15 17 12 17C13.6 17 14.54 15.82 15.12 14.65C15.69 13.48 16.09 11.96 16.45 10.57L16.47 10.5C16.85 9.03 17.2 7.71 17.68 6.74C18.16 5.75 18.6 5.5 19 5.5C19.55 5.5 20 5.05 20 4.5C20 3.95 19.55 3.5 19 3.5C17.4 3.5 16.46 4.68 15.88 5.85C15.31 7.02 14.91 8.54 14.55 9.93L14.53 10C14.15 11.47 13.8 12.79 13.32 13.76C12.84 14.75 12.4 15 12 15C11.85 15 11.67 14.95 11.43 14.68C11.17 14.39 10.9 13.93 10.63 13.28C10.09 11.96 9.67 10.17 9.22 8.27L9.21 8.21C8.78 6.38 8.33 4.44 7.72 2.96C7.41 2.21 7.04 1.5 6.54 0.97C6.03 0.41 5.35 0 4.5 0C3.13 0 2.13 0.67 1.46 1.58C0.82 2.45 0.47 3.55 0.27 4.55C0.07 5.57 0 6.57 -0.02 7.31C-0.02 7.68 -0.02 7.99 -0.01 8.21C-0.01 8.32 -0.01 8.4 0 8.46C0 8.5 0 8.52 0 8.54L0 8.56L0 8.57L0 8.57C0.04 9.12 0.52 9.53 1.07 9.5C1.62 9.46 2.03 8.98 2 8.43L2 8.43L2 8.42L1.99 8.37C1.99 8.32 1.99 8.24 1.99 8.15C1.98 7.96 1.98 7.68 1.98 7.35C2 6.68 2.06 5.81 2.23 4.95C2.41 4.07 2.68 3.3 3.07 2.76C3.43 2.27 3.87 2 4.5 2C4.65 2 4.83 2.05 5.07 2.32C5.33 2.61 5.6 3.07 5.87 3.72C6.41 5.04 6.83 6.83 7.28 8.73L7.29 8.79C7.72 10.62 8.17 12.56 8.78 14.04C9.09 14.79 9.46 15.5 9.96 16.03Z" />	<path id="Layer" fill-rule="evenodd" class="shp1" d="M13.98 0.97C14.49 0.41 15.17 0 16.02 0C17.62 0 18.56 1.18 19.14 2.35C19.71 3.52 20.11 5.04 20.47 6.43L20.49 6.5C20.87 7.97 21.22 9.29 21.7 10.26C22.18 11.25 22.62 11.5 23.02 11.5C23.57 11.5 24.02 11.95 24.02 12.5C24.02 13.05 23.57 13.5 23.02 13.5C21.42 13.5 20.48 12.32 19.9 11.15C19.33 9.98 18.93 8.46 18.57 7.07L18.55 7C18.17 5.53 17.82 4.21 17.34 3.24C16.86 2.25 16.42 2 16.02 2C15.87 2 15.69 2.05 15.45 2.32C15.19 2.61 14.92 3.07 14.65 3.72C14.11 5.04 13.69 6.83 13.24 8.73L13.23 8.79C12.8 10.62 12.35 12.56 11.74 14.04C11.43 14.79 11.06 15.5 10.56 16.03C10.05 16.59 9.37 17 8.52 17C7.15 17 6.15 16.33 5.48 15.42C4.84 14.55 4.49 13.45 4.29 12.45C4.09 11.43 4.02 10.43 4 9.69C4 9.32 4 9.01 4.01 8.79C4.01 8.68 4.01 8.6 4.02 8.54C4.02 8.5 4.02 8.48 4.02 8.46L4.02 8.44L4.02 8.43L4.02 8.43C4.06 7.88 4.54 7.47 5.09 7.5C5.64 7.54 6.05 8.02 6.02 8.57L6.02 8.57L6.02 8.58L6.01 8.63C6.01 8.68 6.01 8.76 6.01 8.85C6 9.04 6 9.32 6 9.65C6.02 10.32 6.08 11.19 6.25 12.05C6.43 12.93 6.7 13.7 7.09 14.24C7.45 14.73 7.89 15 8.52 15C8.67 15 8.85 14.95 9.09 14.68C9.35 14.39 9.62 13.93 9.89 13.28C10.43 11.96 10.85 10.17 11.3 8.27L11.31 8.21C11.74 6.38 12.19 4.44 12.8 2.96C13.11 2.21 13.48 1.5 13.98 0.97Z" /></svg>'

    constructor (fxParameters) {
        super(fxParameters)
        this._mix = 0.2
        this._mixBeforeBypass = this._mix
        this.label = 'Tape delay'
        // this._delayTime = '18t';
        // this._feedback = 0.62
        this._delayTime = '0.8t';
        this._feedback = 0.2
        this.isOn = fxParameters.isOn
    }

    setDelayTime (value) {
        this._delayTime = value
        if (this.isOn) {
            this.fx.delayTime.value = value
        }
    }
    setFeedback (value) {
        this._feedback = value
        if (this.isOn) {
            this.fx.feedback.value = value
        }
    }
    setMix (value, time) {
        this._mix = value
        if (this.isOn) {
            if (!_.isNil(time)) {
                this.fx.wet.setValueAtTime(value, time)
            } else {
                this.fx.wet.value = value
            }
        }
    }
    setBypass (value, time) {
        if (value === true && !this._override) {
            // set mix to 0 rather than turn off so that we can do this rapidly without needing to rebuild the audio chain
            if (this._mix > 0) {
                this._mixBeforeBypass = this._mix
            }
            this.setMix(0, time)
        } else {
            this.setMix(this._mixBeforeBypass, time)
        }
    }

    enable () {
        // const pingPong = new Tone.PingPongDelay("4n", 0.2).toDestination();
        // const drum = new Tone.MembraneSynth().connect(pingPong);
        // drum.triggerAttackRelease("C4", "32n");

        this.fx = new Tone.PingPongDelay(this._delayTime, this._feedback).toDestination();

        this.fx.wet.value = this._mix
        this.setBypass(true)
    }

    getAutomationOptions () {
        return [
            {
                label: 'Enabled',
                name: 'enabled',
                setParameter: this.setBypass.bind(this),
                calculateValue: function (value) {
                    return value === true ? false : true
                }
            },
            /*{
                label: 'Time',
                value: 'delayTime',
                calculateValue: function (value) {
                    // function to take a 0 - 1 value from interface and return appropriate value for this FX parameter
                    return numberRange(value, 0, 1, 0, 2000)
                }
            },
            {
                label: 'Feedback',
                value: 'feedback',
                calculateValue: function (value) {
                    // function to take a 0 - 1 value from interface and return appropriate value for this FX parameter
                    return value
                }
            },
            {
                label: 'Mix',
                value: 'mix',
                calculateValue: function (value) {
                    // function to take a 0 - 1 value from interface and return appropriate value for this FX parameter
                    return value
                }
            }*/
        ]
    }
}
